{
  "name": "claude-flow-novice",
  "version": "1.5.3",
  "description": "Standalone Claude Flow for beginners - AI agent orchestration made easy with enhanced TDD testing pipeline. Enhanced init command creates complete agent system, MCP configuration with 30 essential tools, and automated hooks with single-file testing, real-time coverage analysis, and advanced validation. Fully standalone with zero external dependencies, complete project setup in one command.",
  "mcpName": "io.github.ruvnet/claude-flow",
  "main": ".claude-flow-novice/dist/index.js",
  "bin": {
    "claude-flow-novice": ".claude-flow-novice/dist/src/cli/main.js",
    "claude-soul": ".claude/commands/claude-soul.js",
    "swarm": ".claude/commands/swarm.js",
    "sparc": ".claude/commands/sparc.js",
    "hooks": ".claude/commands/hooks.js",
    "enhanced-hooks": ".claude-flow-novice/dist/src/hooks/enhanced-hooks-cli.js"
  },
  "scripts": {
    "claude-soul": "node src/slash-commands/claude-soul.js",
    "swarm": "node .claude/commands/swarm.js",
    "sparc": "node .claude/commands/sparc.js",
    "hooks": "node .claude/commands/hooks.js",
    "enhanced-hooks": "node .claude-flow-novice/dist/src/hooks/enhanced-hooks-cli.js",
    "neural": "node .claude/commands/neural.js",
    "performance": "node .claude/commands/performance.js",
    "github": "node .claude/commands/github.js",
    "workflow": "node .claude/commands/workflow.js",
    "dev": "tsx src/cli/main.ts",
    "fullstack:demo": "tsx examples/fullstack-demo.ts",
    "fullstack:develop": "tsx src/swarm-fullstack/cli/fullstack-cli.ts develop",
    "fullstack:status": "tsx src/swarm-fullstack/cli/fullstack-cli.ts status",
    "fullstack:terminate": "tsx src/swarm-fullstack/cli/fullstack-cli.ts terminate",
    "fullstack:spawn": "tsx src/swarm-fullstack/cli/fullstack-cli.ts spawn",
    "chrome-mcp:test": "tsx examples/chrome-mcp-demo.ts",
    "shadcn:generate": "tsx examples/shadcn-demo.ts",
    "optimize:activate": "node scripts/optimization/unified-activation.js activate",
    "optimize:rollback": "node scripts/optimization/unified-activation.js rollback",
    "optimize:status": "node scripts/optimization/unified-activation.js status",
    "optimize:validate": "node scripts/optimization/config-validator.js validate",
    "optimize:validate:sqlite": "node scripts/optimization/config-validator.js validate sqlite",
    "optimize:validate:performance": "node scripts/optimization/config-validator.js validate performance",
    "optimize:validate:hardware": "node scripts/optimization/config-validator.js validate hardware",
    "optimize:validate:monitoring": "node scripts/optimization/config-validator.js validate monitoring",
    "build": "scripts/build/unified-builder.sh safe",
    "build:swc": "swc src -d .claude-flow-novice/dist --only='**/*.ts' --config-file .swcrc && cp -r src/slash-commands .claude-flow-novice/dist/src/ && cp -r src/cli/simple-commands/hooks .claude-flow-novice/dist/src/cli/simple-commands/ && cp -r src/cli/simple-commands/init/templates .claude-flow-novice/dist/src/cli/simple-commands/init/ && cp src/cli/simple-commands/init/index.js .claude-flow-novice/dist/src/cli/simple-commands/init/ && cp src/cli/simple-commands/init.js .claude-flow-novice/dist/src/cli/simple-commands/ && cp -r .claude/agents .claude-flow-novice/.claude/",
    "build:types": "tsc --project config/typescript/tsconfig.json --emitDeclarationOnly --outDir .claude-flow-novice/dist --skipLibCheck",
    "build:watch": "swc src -d .claude-flow-novice/dist --watch --config-file .swcrc && cp -r src/slash-commands .claude-flow-novice/dist/src/ && cp -r src/cli/simple-commands/hooks .claude-flow-novice/dist/src/cli/simple-commands/ && cp -r src/cli/simple-commands/init/templates .claude-flow-novice/dist/src/cli/simple-commands/init/ && npm run copy:agents",
    "build:legacy": "scripts/build/unified-builder.sh migration",
    "build:workaround": "scripts/build/unified-builder.sh workaround",
    "build:force": "scripts/build/unified-builder.sh force",
    "build:monitor": "scripts/build/unified-builder.sh monitor",
    "clean": "rm -rf .claude-flow-novice/dist dist .crdt-data .demo-crdt-data",
    "build:esm": "tsc --project config/typescript/tsconfig.json",
    "typecheck": "echo '⚠️ TypeScript checker has internal compiler bug - using SWC for compilation'",
    "fix:typescript": "node scripts/build/typescript-fixer.js",
    "fix:typescript:basic": "node scripts/build/typescript-fixer.js basic",
    "fix:typescript:advanced": "node scripts/build/typescript-fixer.js advanced",
    "fix:typescript:quick": "node scripts/build/typescript-fixer.js quick",
    "typecheck:watch": "tsc --project config/typescript/tsconfig.json --noEmit --watch --skipLibCheck",
    "dev:build": "npm run build:watch",
    "test": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js --bail --maxWorkers=1 --forceExit",
    "test:crdt": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js tests/crdt/ --bail --maxWorkers=1",
    "test:verification": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js tests/verification/ --bail --maxWorkers=1",
    "demo:crdt": "node --loader ts-node/esm src/verification/demo.ts",
    "test:watch": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js --watch",
    "test:unit": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit",
    "test:integration": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration",
    "test:e2e": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e",
    "test:performance": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance",
    "test:cli": "NODE_OPTIONS='--experimental-vm-modules' jest src/cli/__tests__",
    "test:coverage": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js --coverage",
    "test:coverage:unit": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit --coverage",
    "test:coverage:integration": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration --coverage",
    "test:coverage:e2e": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e --coverage",
    "test:ci": "NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js --ci --coverage --maxWorkers=2",
    "test:debug": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' jest --runInBand --no-cache",
    "test:comprehensive": "node scripts/test/test-comprehensive.js",
    "test:comprehensive:verbose": "node scripts/test/test-comprehensive.js --verbose",
    "test:comprehensive:full": "node scripts/test/test-comprehensive.js --load --docker --npx",
    "test:load": "node scripts/test/test-comprehensive.js --load",
    "test:docker": "node scripts/test/test-comprehensive.js --docker",
    "test:npx": "node scripts/test/test-comprehensive.js --npx",
    "test:health": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration/system-integration.test.ts --testNamePattern='Health'",
    "test:swarm": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e/swarm-coordination.test.ts",
    "test:benchmark": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance/benchmark.test.ts",
    "test:performance:basic": "node scripts/build/performance-monitor.js test basic",
    "test:performance:load": "node scripts/build/performance-monitor.js test load",
    "test:performance:stress": "node scripts/build/performance-monitor.js test stress",
    "test:performance:endurance": "node scripts/build/performance-monitor.js test endurance",
    "test:performance:all": "node scripts/build/performance-monitor.js test endurance",
    "performance:gate:validate": "node scripts/build/performance-monitor.js test basic",
    "performance:monitor": "node scripts/build/performance-monitor.js monitor",
    "performance:report": "node scripts/build/performance-monitor.js report",
    "performance:regression:detect": "node scripts/test/check-performance-regression.ts regression",
    "performance:report:generate": "node scripts/build/performance-monitor.js report",
    "performance:baseline:create": "npm run test:performance:basic && npm run performance:gate:validate",
    "performance:ci": "npm run test:performance:basic && npm run test:performance:load && npm run performance:gate:validate",
    "performance:full": "npm run test:performance:all && npm run performance:gate:validate && npm run performance:regression:detect && npm run performance:report:generate",
    "test:e2e:playwright": "playwright test",
    "test:e2e:playwright:ui": "playwright test --ui",
    "test:e2e:playwright:debug": "playwright test --debug",
    "test:e2e:playwright:headed": "playwright test --headed",
    "playwright:install": "playwright install",
    "playwright:codegen": "playwright codegen http://localhost:3000",
    "test:heavy-command-detection": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/heavy-command-detection.test.js --bail --maxWorkers=1",
    "test:sublinear-optimization": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/sublinear-optimization.test.js --bail --maxWorkers=1",
    "test:goap-planning": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/goap-planning.test.js --bail --maxWorkers=1",
    "test:phase2-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase2-byzantine-integration.test.js --bail --maxWorkers=1",
    "validate:phase2": "node scripts/dev/validate-phase2.cjs",
    "test:phase3-temporal": "NODE_OPTIONS='--experimental-vm-modules' jest tests/temporal/temporal-prediction.test.js --bail --maxWorkers=1",
    "test:phase3-crypto": "NODE_OPTIONS='--experimental-vm-modules' jest tests/crypto/signature-validation.test.js --bail --maxWorkers=1",
    "test:phase3-database": "NODE_OPTIONS='--experimental-vm-modules' jest tests/database/performance-optimization.test.js --bail --maxWorkers=1",
    "test:phase3-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase3-critical-fixes.test.js --bail --maxWorkers=1",
    "test:phase3-all": "npm run test:phase3-temporal && npm run test:phase3-crypto && npm run test:phase3-database && npm run test:phase3-integration",
    "validate:phase3": "npm run test:phase3-all",
    "test:phase4-team-sync": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/team-synchronization.test.js --bail --maxWorkers=1",
    "test:phase4-conflict": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/conflict-resolution.test.js --bail --maxWorkers=1",
    "test:phase4-pattern": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/pattern-sharing.test.js --bail --maxWorkers=1",
    "test:phase4-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase4-byzantine-integration.test.js --bail --maxWorkers=1",
    "test:phase4-all": "npm run test:phase4-team-sync && npm run test:phase4-conflict && npm run test:phase4-pattern",
    "validate:phase4": "node scripts/dev/validate-phase4.js",
    "lint": "eslint src --ext .ts --max-warnings 0 --config config/linting/.eslintrc.json",
    "format": "prettier --write 'src/**/*.{ts,js,json}' --config config/linting/.prettierrc.json",
    "lint:fix": "eslint src --ext .ts --fix --config config/linting/.eslintrc.json",
    "type": "TYPE_CHECKING",
    "type:watch": "TYPE_CHECKING --watch",
    "test:phase1-basic": "node scripts/test-phase1-basic.js",
    "test:phase1-persistence": "node scripts/test-phase1-persistence.js",
    "test:phase1-neural": "node scripts/test-phase1-neural.js",
    "test:phase1-all": "npm run test:phase1-basic && npm run test:phase1-persistence && npm run test:phase1-neural",
    "clean:test": "find . -name '*.test-output' -delete && find . -name 'test-db.sqlite' -delete",
    "test:completion-truth-validator": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/truth-validator.test.js --bail --maxWorkers=1",
    "test:completion-interceptor": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/interceptor-integration.test.js --bail --maxWorkers=1",
    "test:framework-thresholds": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/framework-protocols.test.js --bail --maxWorkers=1",
    "test:phase1-completion-validation": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase1-completion-validation.test.js --bail --maxWorkers=1",
    "test:completion-validation-all": "npm run test:completion-truth-validator && npm run test:completion-interceptor && npm run test:framework-thresholds && npm run test:phase1-completion-validation",
    "validate:phase1-completion": "npm run test:completion-validation-all",
    "debug:hooks": "DEBUG=hooks* npm run dev",
    "debug:sparc": "DEBUG=sparc* npm run dev",
    "debug:swarm": "DEBUG=swarm* npm run dev",
    "mcp:start": "node .claude-flow-novice/dist/mcp/mcp-server-sdk.js",
    "mcp:status": "node -e \"console.log('MCP Server Status: Ready')\"",
    "mcp:verify": "node scripts/verify-mcp-server.js",
    "security:audit": "node scripts/security/ruv-swarm-safe.js --audit",
    "security:validate": "node scripts/security/ruv-swarm-safe.js",
    "migrate": "node scripts/migration/migrate-hooks.js",
    "migrate:dry-run": "node scripts/migration/migrate-hooks.js --dry-run",
    "install:arm64": "node scripts/migration/install-arm64.js",
    "dev:portal": "scripts/dev/start-portal.sh",
    "dev:monitor": "python scripts/dev/claude-monitor.py",
    "utils:fix-imports": "node scripts/utils/fix-import-paths.js",
    "utils:cleanup": "bash scripts/utils/clean-build-artifacts.sh",
    "hooks:session-start": "node src/cli/simple-commands/hooks.js session-start",
    "postinstall": "node scripts/post-install-claude-md.js",
    "validate:agents": "node scripts/build/validate-agents.js",
    "copy:agents": "mkdir -p .claude-flow-novice/.claude && cp -r .claude/agents .claude-flow-novice/.claude/"
  },
  "keywords": [
    "ai",
    "claude",
    "claude-code",
    "flow",
    "orchestration",
    "agents",
    "workflow",
    "automation",
    "swarm",
    "ruv-swarm",
    "github",
    "docker",
    "enterprise",
    "coordination",
    "multi-agent",
    "neural-networks",
    "cli",
    "tools",
    "beginner",
    "novice",
    "simple",
    "learning",
    "project-soul",
    "session-hooks",
    "ai-context",
    "documentation"
  ],
  "author": "Claude Flow Novice Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/masharratt/claude-flow-novice.git"
  },
  "bugs": {
    "url": "https://github.com/masharratt/claude-flow-novice/issues"
  },
  "homepage": "https://github.com/masharratt/claude-flow-novice#readme",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=9.0.0"
  },
  "files": [
    ".claude-flow-novice/",
    ".claude/",
    "config/",
    "scripts/",
    "src/commands/",
    "src/slash-commands/",
    "src/cli/simple-commands/",
    "src/swarm-fullstack/",
    "src/npx/",
    "src/language/",
    "examples/",
    "wiki/",
    "CLAUDE.md",
    "README.md",
    "README-NPM.md",
    "LICENSE",
    "CHANGELOG.md"
  ],
  "exports": {
    ".": "./.claude-flow-novice/dist/index.js",
    "./cli": "./.claude-flow-novice/dist/cli/index.js",
    "./mcp": "./.claude-flow-novice/dist/mcp/mcp-server-sdk.js",
    "./mcp-novice": "./.claude-flow-novice/dist/mcp/mcp-server-novice.js",
    "./core": "./.claude-flow-novice/dist/core/index.js",
    "./slash-commands/claude-soul": "./.claude-flow-novice/dist/src/slash-commands/claude-soul.js",
    "./slash-commands/register-claude-soul": "./.claude-flow-novice/dist/src/slash-commands/register-claude-soul.js",
    "./hooks/session-start-soul": "./.claude-flow-novice/dist/src/cli/simple-commands/hooks/session-start-soul.js",
    "./hooks/enhanced-post-edit": "./.claude-flow-novice/dist/src/hooks/enhanced-post-edit-pipeline.js",
    "./hooks/enhanced-hooks-cli": "./.claude-flow-novice/dist/src/hooks/enhanced-hooks-cli.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.18.2",
    "boxen": "^8.0.1",
    "chalk": "^4.1.2",
    "cli-table3": "^0.6.5",
    "commander": "^13.1.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "fs-extra": "^11.2.0",
    "glob": "^11.0.0",
    "helmet": "^7.0.0",
    "inquirer": "^12.9.6",
    "ora": "^8.2.0",
    "p-queue": "^7.4.0",
    "socket.io": "^4.8.1",
    "table": "^6.8.0",
    "uuid": "^13.0.0",
    "ws": "^8.14.0",
    "yaml": "^2.8.1",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@playwright/test": "^1.55.1",
    "@swc/cli": "^0.7.8",
    "@swc/core": "^1.13.19",
    "@types/blessed": "^0.1.25",
    "@types/commander": "^2.12.0",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/figlet": "^1.7.0",
    "@types/fs-extra": "^11.0.4",
    "@types/gradient-string": "^1.1.6",
    "@types/inquirer": "^9.0.7",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.19.7",
    "@types/uuid": "^10.0.0",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "babel-jest": "^29.7.0",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.5",
    "express": "^5.1.0",
    "jest": "^29.7.0",
    "playwright": "^1.55.1",
    "prettier": "^3.1.1",
    "ts-jest": "^29.4.0",
    "tsx": "^4.6.2",
    "typescript": "^5.6.3"
  },
  "pkg": {
    "targets": [
      "node20-linux-x64",
      "node20-macos-x64",
      "node20-win-x64"
    ],
    "scripts": "dist/**/*.js",
    "outputPath": "bin",
    "options": [
      "--experimental-specifier-resolution=node"
    ]
  },
  "type": "module",
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "directories": {
    "doc": "wiki",
    "example": "examples",
    "test": "tests"
  }
}
