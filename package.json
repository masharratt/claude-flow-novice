{
  "name": "claude-flow-novice",
  "version": "1.0.0",
  "description": "Simplified Claude Flow for beginners - AI agent orchestration made easy",
  "mcpName": "io.github.ruvnet/claude-flow",
  "main": "cli.mjs",
  "bin": {
    "claude-flow-novice": "bin/claude-flow-novice.js"
  },
  "scripts": {
    "dev": "tsx src/cli/main.ts",
    "build": "npm run clean && npm run build:esm",
    "clean": "rm -rf dist .crdt-data .demo-crdt-data",
    "build:esm": "tsc",
    "typecheck": "tsc --noEmit",
    "typecheck:watch": "tsc --noEmit --watch",
    "dev:build": "tsc --watch",
    "test": "NODE_OPTIONS='--experimental-vm-modules' jest --bail --maxWorkers=1 --forceExit",
    "test:crdt": "NODE_OPTIONS='--experimental-vm-modules' jest tests/crdt/ --bail --maxWorkers=1",
    "test:verification": "NODE_OPTIONS='--experimental-vm-modules' jest tests/verification/ --bail --maxWorkers=1",
    "demo:crdt": "node --loader ts-node/esm src/verification/demo.ts",
    "test:watch": "NODE_OPTIONS='--experimental-vm-modules' jest --watch",
    "test:unit": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit",
    "test:integration": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration",
    "test:e2e": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e",
    "test:performance": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance",
    "test:cli": "NODE_OPTIONS='--experimental-vm-modules' jest src/cli/__tests__",
    "test:coverage": "NODE_OPTIONS='--experimental-vm-modules' jest --coverage",
    "test:coverage:unit": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit --coverage",
    "test:coverage:integration": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration --coverage",
    "test:coverage:e2e": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e --coverage",
    "test:ci": "NODE_OPTIONS='--experimental-vm-modules' jest --ci --coverage --maxWorkers=2",
    "test:debug": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' jest --runInBand --no-cache",
    "test:comprehensive": "node scripts/test-comprehensive.js",
    "test:comprehensive:verbose": "node scripts/test-comprehensive.js --verbose",
    "test:comprehensive:full": "node scripts/test-comprehensive.js --load --docker --npx",
    "test:load": "node scripts/test-comprehensive.js --load",
    "test:docker": "node scripts/test-comprehensive.js --docker",
    "test:npx": "node scripts/test-comprehensive.js --npx",
    "test:health": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration/system-integration.test.ts --testNamePattern='Health'",
    "test:swarm": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e/swarm-coordination.test.ts",
    "test:benchmark": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance/benchmark.test.ts",
    "test:e2e:playwright": "playwright test",
    "test:e2e:playwright:ui": "playwright test --ui",
    "test:e2e:playwright:debug": "playwright test --debug",
    "test:e2e:playwright:headed": "playwright test --headed",
    "playwright:install": "playwright install",
    "playwright:codegen": "playwright codegen http://localhost:3000",
    "test:heavy-command-detection": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/heavy-command-detection.test.js --bail --maxWorkers=1",
    "test:sublinear-optimization": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/sublinear-optimization.test.js --bail --maxWorkers=1",
    "test:goap-planning": "NODE_OPTIONS='--experimental-vm-modules' jest tests/resource-intelligence/goap-planning.test.js --bail --maxWorkers=1",
    "test:phase2-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase2-byzantine-integration.test.js --bail --maxWorkers=1",
    "validate:phase2": "node scripts/validate-phase2.cjs",
    "test:phase3-temporal": "NODE_OPTIONS='--experimental-vm-modules' jest tests/temporal/temporal-prediction.test.js --bail --maxWorkers=1",
    "test:phase3-crypto": "NODE_OPTIONS='--experimental-vm-modules' jest tests/crypto/signature-validation.test.js --bail --maxWorkers=1",
    "test:phase3-database": "NODE_OPTIONS='--experimental-vm-modules' jest tests/database/performance-optimization.test.js --bail --maxWorkers=1",
    "test:phase3-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase3-critical-fixes.test.js --bail --maxWorkers=1",
    "test:phase3-all": "npm run test:phase3-temporal && npm run test:phase3-crypto && npm run test:phase3-database && npm run test:phase3-integration",
    "validate:phase3": "npm run test:phase3-all",
    "test:phase4-team-sync": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/team-synchronization.test.js --bail --maxWorkers=1",
    "test:phase4-conflict": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/conflict-resolution.test.js --bail --maxWorkers=1",
    "test:phase4-pattern": "NODE_OPTIONS='--experimental-vm-modules' jest tests/team-collaboration/pattern-sharing.test.js --bail --maxWorkers=1",
    "test:phase4-integration": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase4-byzantine-integration.test.js --bail --maxWorkers=1",
    "test:phase4-all": "npm run test:phase4-team-sync && npm run test:phase4-conflict && npm run test:phase4-pattern",
    "validate:phase4": "node scripts/validate-phase4.js",
    "lint": "eslint src --ext .ts --max-warnings 0",
    "format": "prettier --write 'src/**/*.{ts,js,json}'",
    "lint:fix": "eslint src --ext .ts --fix",
    "type": "TYPE_CHECKING",
    "type:watch": "TYPE_CHECKING --watch",
    "test:phase1-basic": "node scripts/test-phase1-basic.js",
    "test:phase1-persistence": "node scripts/test-phase1-persistence.js",
    "test:phase1-neural": "node scripts/test-phase1-neural.js",
    "test:phase1-all": "npm run test:phase1-basic && npm run test:phase1-persistence && npm run test:phase1-neural",
    "clean:test": "find . -name '*.test-output' -delete && find . -name 'test-db.sqlite' -delete",
    "test:completion-truth-validator": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/truth-validator.test.js --bail --maxWorkers=1",
    "test:completion-interceptor": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/interceptor-integration.test.js --bail --maxWorkers=1",
    "test:framework-thresholds": "NODE_OPTIONS='--experimental-vm-modules' jest tests/completion-validation/framework-protocols.test.js --bail --maxWorkers=1",
    "test:phase1-completion-validation": "NODE_OPTIONS='--experimental-vm-modules' jest tests/integration/phase1-completion-validation.test.js --bail --maxWorkers=1",
    "test:completion-validation-all": "npm run test:completion-truth-validator && npm run test:completion-interceptor && npm run test:framework-thresholds && npm run test:phase1-completion-validation",
    "validate:phase1-completion": "npm run test:completion-validation-all",
    "debug:hooks": "DEBUG=hooks* npm run dev",
    "debug:sparc": "DEBUG=sparc* npm run dev",
    "debug:swarm": "DEBUG=swarm* npm run dev"
  },
  "keywords": [
    "ai",
    "claude",
    "flow",
    "orchestration",
    "agents",
    "workflow",
    "automation",
    "swarm",
    "ruv-swarm",
    "github",
    "docker",
    "enterprise",
    "coordination",
    "multi-agent",
    "neural-networks",
    "cli",
    "tools",
    "beginner",
    "novice",
    "simple",
    "learning"
  ],
  "author": "Claude Flow Novice Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/masharratt/claude-flow-novice.git"
  },
  "bugs": {
    "url": "https://github.com/masharratt/claude-flow-novice/issues"
  },
  "homepage": "https://github.com/masharratt/claude-flow-novice#readme",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=9.0.0"
  },
  "files": [
    "cli.js",
    "bin/claude-flow.js",
    "bin/claude-flow",
    "bin/claude-flow-dev",
    "bin/claude-flow-pkg.js",
    "bin/claude-flow-swarm",
    "bin/claude-flow-swarm-background",
    "bin/claude-flow-swarm-bg",
    "bin/claude-flow-swarm-monitor",
    "bin/claude-flow-swarm-ui",
    "dist/",
    "src/",
    ".claude/",
    "docker-test/",
    "scripts/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "DOCKER_TEST_REPORT.md"
  ],
  "dependencies": {
    "@tensorflow/tfjs-node": "^4.22.0",
    "chalk": "^4.1.2",
    "commander": "^11.1.0",
    "fs-extra": "^11.2.0",
    "inquirer": "^9.2.12",
    "ora": "^7.0.1",
    "socket.io": "^4.8.1",
    "sqlite": "^5.1.1",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/plugin-syntax-import-attributes": "^7.27.1",
    "@babel/preset-env": "^7.28.0",
    "@playwright/test": "^1.55.1",
    "@types/blessed": "^0.1.25",
    "@types/commander": "^2.12.0",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/figlet": "^1.7.0",
    "@types/fs-extra": "^11.0.4",
    "@types/gradient-string": "^1.1.6",
    "@types/inquirer": "^9.0.7",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.19.7",
    "@types/uuid": "^10.0.0",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "@vercel/ncc": "^0.38.3",
    "babel-jest": "^29.7.0",
    "chai": "^6.0.1",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.5",
    "express": "^5.1.0",
    "globals": "^16.3.0",
    "jest": "^29.7.0",
    "playwright": "^1.55.1",
    "prettier": "^3.1.1",
    "puppeteer": "^24.11.2",
    "sinon": "^21.0.0",
    "supertest": "^7.1.4",
    "ts-jest": "^29.4.0",
    "tsx": "^4.6.2",
    "typescript": "^5.3.3",
    "typescript-eslint": "^8.37.0"
  },
  "pkg": {
    "targets": [
      "node20-linux-x64",
      "node20-macos-x64",
      "node20-win-x64"
    ],
    "scripts": "dist/**/*.js",
    "outputPath": "bin",
    "options": [
      "--experimental-specifier-resolution=node"
    ]
  },
  "type": "module",
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  }
}
