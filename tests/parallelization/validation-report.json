{
  "summary": {
    "total": 13,
    "passed": 2,
    "failed": 11,
    "timestamp": "2025-10-11T04:47:06.825Z",
    "production_ready": false
  },
  "before_production": {
    "redis_pubsub": {
      "name": "redis-pubsub",
      "category": "before_production",
      "passed": true,
      "duration": 31549,
      "metric": "29 msg/sec",
      "threshold": ">10K msg/sec sustained",
      "actual": "29 msg/sec"
    },
    "test_lock": {
      "name": "test-lock-serialization",
      "category": "before_production",
      "passed": false,
      "duration": 35321,
      "error": "stderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-1\n\nstderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-2\n\nstderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-3\n\n\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nAssertionError: expected 3 to be +0 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 0\u001b[39m\n\u001b[31m+ 3\u001b[39m\n\n ❯ tests/parallelization/test-lock-serialization.test.ts:454:36\n    452| \n    453|       // CRITICAL: No port conflicts should occur\n    454|       expect(portConflicts.length).toBe(0);\n       |                                    ^\n    455|     }, 120000); // 2 minute timeout\n    456|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Concurrency Prevention > should prevent concurrent test execution across 10 sprints 20168ms\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Concurrency Prevention > should verify no overlap in execution windows 3024ms\n × tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000 215ms\n   → expected 3 to be +0 // Object.is equality\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Lock Management > should acquire and release lock correctly 5ms\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Lock Management > should timeout if lock not available within limit 1013ms\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Lock Management > should handle lock expiration (stale lock protection) 3009ms\n ✓ tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Queue Fairness > should process sprints in FIFO order 1613ms\n\n Test Files  1 failed (1)\n      Tests  1 failed | 6 passed (7)\n   Start at  21:39:37\n   Duration  32.56s (transform 95ms, setup 0ms, collect 536ms, tests 29.05s, environment 0ms, prepare 1.16s)\n\n"
    },
    "orphan_detection": {
      "name": "orphan-detection",
      "category": "before_production",
      "passed": false,
      "duration": 226892,
      "error": "stderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\nstderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\nstderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\n\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should detect orphans without cleanup\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/orphan-detection.test.ts:459:5\n    457|     );\n    458| \n    459|     it('should detect orphans without cleanup', async () => {\n       |     ^\n    460|       // Spawn agents\n    461|       const agents: AgentInstance[] = [];\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should cleanup all orphans within 3 minutes\nCrashed 10 agents (50% of 20)\nWaiting 3 minutes for orphan detection...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should cleanup all orphans within 3 minutes\nOrphan detection completed in 9ms: 10 orphans cleaned\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should cleanup all orphans within 3 minutes\nMemory growth: 0.01MB (tolerance: 10.00MB)\n\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should cleanup all orphans within 3 minutes 180056ms\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Leak Detection > should detect memory leak with 100MB growth threshold\nBaseline memory: 18.79MB\nCreating 150MB of Redis keys to simulate memory leak...\n\n × tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should detect orphans without cleanup 5037ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Leak Detection > should detect memory leak with 100MB growth threshold\nMemory leak detection: growth=203.41MB, threshold=100.00MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting 10 sequential epics...\nExecuting epic 1/10...\n\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Leak Detection > should detect memory leak with 100MB growth threshold 413ms\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Leak Detection > should not detect leak under threshold 17ms\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 1 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 1: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 2/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 2 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 2: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 3/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 3 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 3: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 4/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 4 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 4: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 5/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 5 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 5: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 6/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 6 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 6: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 7/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 7 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 7: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 8/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 8 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 8: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 9/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 9 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 9: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nExecuting epic 10/10...\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nEpic 10 memory: 1.44MB\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nCleanup after epic 10: 0 orphans\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics\nAverage memory growth per epic: -0.00MB (max: 5.00MB)\n\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should maintain stable memory over 10 sequential epics 25445ms\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should cleanup orphans between epics\nEpic 1: orphans before=0, cleaned=0, orphans after=0\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should cleanup orphans between epics\nEpic 2: orphans before=0, cleaned=0, orphans after=0\n\nstdout | tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should cleanup orphans between epics\nEpic 3: orphans before=0, cleaned=0, orphans after=0\n\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Long-Running Epic Stability > should cleanup orphans between epics 3049ms\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Detector Edge Cases > should handle no orphans gracefully 9ms\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Detector Edge Cases > should handle agents without heartbeat keys 3ms\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Tracker Edge Cases > should throw error if baseline not set 3ms\n ✓ tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Memory Tracker Edge Cases > should handle memory fluctuations 6ms\n\n Test Files  1 failed (1)\n      Tests  1 failed | 9 passed (10)\n   Start at  21:40:12\n   Duration  224.23s (transform 164ms, setup 0ms, collect 7.56s, tests 214.04s, environment 0ms, prepare 812ms)\n\n"
    },
    "productive_waiting": {
      "name": "productive-waiting",
      "category": "before_production",
      "passed": false,
      "duration": 43721,
      "error": "\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should not conflict with dependency when resolved\nAssertionError: expected true to be false // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- false\u001b[39m\n\u001b[31m+ true\u001b[39m\n\n ❯ tests/parallelization/productive-waiting.test.ts:383:57\n    381|     // Working files should no longer contain the mock\n    382|     const updatedWorkingFiles = sprint2.getWorkingFiles();\n    383|     expect(updatedWorkingFiles.has('auth-api-mock.ts')).toBe(false);\n       |                                                         ^\n    384|   });\n    385| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should process productive work queue efficiently\nAssertionError: expected 6004 to be less than 6000\n ❯ tests/parallelization/productive-waiting.test.ts:427:22\n    425| \n    426|     // Duration should be ~5s (dependency wait), not 9s (5s + 4s)\n    427|     expect(duration).toBeLessThan(6000);\n       |                      ^\n    428|     expect(duration).toBeGreaterThan(4500);\n    429|   }, 10000);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should timeout if dependency never resolves\nError: Test timed out in 15000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/productive-waiting.test.ts:488:3\n    486|   // ===== TIMEOUT HANDLING TEST =====\n    487| \n    488|   it('should timeout if dependency never resolves', async () => {\n       |   ^\n    489|     const sprint = new SprintCoordinatorEnhanced(\n    490|       {\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\n ✓ tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should complete 50%+ of productive work during wait 13512ms\n × tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should not conflict with dependency when resolved 1013ms\n   → expected true to be false // Object.is equality\n × tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should process productive work queue efficiently 6005ms\n   → expected 6004 to be less than 6000\n ✓ tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should verify mock replacement logic 1502ms\n × tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should timeout if dependency never resolves 15006ms\n   → Test timed out in 15000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n\n Test Files  1 failed (1)\n      Tests  3 failed | 2 passed (5)\n   Start at  21:43:59\n   Duration  40.61s (transform 102ms, setup 0ms, collect 182ms, tests 37.04s, environment 0ms, prepare 1.17s)\n\n"
    },
    "api_key_rotation": {
      "name": "api-key-rotation",
      "category": "before_production",
      "passed": false,
      "error": "Test file not found",
      "metric": "SKIP"
    },
    "deadlock_prevention": {
      "name": "deadlock-prevention",
      "category": "before_production",
      "passed": true,
      "duration": 47813,
      "metric": "30s timeout",
      "threshold": "<35s timeout for circular deps",
      "actual": "30s timeout"
    }
  },
  "chaos_tests": {
    "random_crashes": {
      "name": "chaos-random-crashes",
      "category": "chaos_tests",
      "passed": false,
      "error": "Test file not found",
      "metric": "SKIP"
    },
    "redis_failures": {
      "name": "chaos-redis-failures",
      "category": "chaos_tests",
      "passed": false,
      "error": "Test file not found",
      "metric": "SKIP"
    },
    "concurrent_edits": {
      "name": "chaos-concurrent-edits",
      "category": "chaos_tests",
      "passed": false,
      "error": "Test file not found",
      "metric": "SKIP"
    },
    "test_lock_crashes": {
      "name": "chaos-test-lock-crashes",
      "category": "chaos_tests",
      "passed": false,
      "error": "Test file not found",
      "metric": "SKIP"
    }
  },
  "performance_benchmarks": {
    "three_independent_sprints": {
      "name": "performance-benchmarks",
      "category": "performance_benchmarks",
      "passed": false,
      "duration": 32686,
      "error": "\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster) 5040ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster) 5003ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster) 5004ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\nstdout | tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\n\n=== RESOURCE CONFLICT DETECTION ===\nConflicts Found: 0\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale 5002ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution 3ms\n   → expected 0 to be greater than 0\n\n Test Files  1 failed (1)\n      Tests  5 failed (5)\n   Start at  21:45:31\n   Duration  30.09s (transform 113ms, setup 0ms, collect 7.11s, tests 20.05s, environment 0ms, prepare 1.06s)\n\n"
    },
    "five_mixed_sprints": {
      "name": "performance-benchmarks",
      "category": "performance_benchmarks",
      "passed": false,
      "duration": 32486,
      "error": "\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster) 5042ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster) 5003ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster) 5003ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\nstdout | tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\n\n=== RESOURCE CONFLICT DETECTION ===\nConflicts Found: 0\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale 5002ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution 3ms\n   → expected 0 to be greater than 0\n\n Test Files  1 failed (1)\n      Tests  5 failed (5)\n   Start at  21:46:03\n   Duration  30.02s (transform 101ms, setup 0ms, collect 7.12s, tests 20.05s, environment 0ms, prepare 957ms)\n\n"
    },
    "ten_sprints": {
      "name": "performance-benchmarks",
      "category": "performance_benchmarks",
      "passed": false,
      "duration": 32720,
      "error": "\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n",
      "metric": "\n RUN  v3.2.4 /mnt/c/Users/masha/Documents/claude-flow-novice\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster) 5040ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster) 5003ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster) 5003ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\nstdout | tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\n\n=== RESOURCE CONFLICT DETECTION ===\nConflicts Found: 0\n\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale 5004ms\n   → Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n × tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution 4ms\n   → expected 0 to be greater than 0\n\n Test Files  1 failed (1)\n      Tests  5 failed (5)\n   Start at  21:46:36\n   Duration  30.12s (transform 111ms, setup 0ms, collect 7.16s, tests 20.05s, environment 0ms, prepare 985ms)\n\n"
    }
  },
  "critical_failures": [
    "before_production/test-lock-serialization: stderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-1\n\nstderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-2\n\nstderr | tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nPort conflict detected for sprint-3\n\n\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/test-lock-serialization.test.ts > Test Lock Serialization > Port Conflict Prevention > should never encounter port conflicts on port 3000\nAssertionError: expected 3 to be +0 // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- 0\u001b[39m\n\u001b[31m+ 3\u001b[39m\n\n ❯ tests/parallelization/test-lock-serialization.test.ts:454:36\n    452| \n    453|       // CRITICAL: No port conflicts should occur\n    454|       expect(portConflicts.length).toBe(0);\n       |                                    ^\n    455|     }, 120000); // 2 minute timeout\n    456|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n\n",
    "before_production/orphan-detection: stderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\nstderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\nstderr | tests/parallelization/orphan-detection.test.ts\nUsing an object as a third argument is deprecated. Vitest 4 will throw an error if the third argument is not a timeout number. Please use the second argument for options. See more at https://vitest.dev/guide/migration\n\n\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/orphan-detection.test.ts > Orphan Detection and Memory Leak Prevention > Orphan Cleanup > should detect orphans without cleanup\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/orphan-detection.test.ts:459:5\n    457|     );\n    458| \n    459|     it('should detect orphans without cleanup', async () => {\n       |     ^\n    460|       // Spawn agents\n    461|       const agents: AgentInstance[] = [];\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯\n\n",
    "before_production/productive-waiting: \n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should not conflict with dependency when resolved\nAssertionError: expected true to be false // Object.is equality\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- false\u001b[39m\n\u001b[31m+ true\u001b[39m\n\n ❯ tests/parallelization/productive-waiting.test.ts:383:57\n    381|     // Working files should no longer contain the mock\n    382|     const updatedWorkingFiles = sprint2.getWorkingFiles();\n    383|     expect(updatedWorkingFiles.has('auth-api-mock.ts')).toBe(false);\n       |                                                         ^\n    384|   });\n    385| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should process productive work queue efficiently\nAssertionError: expected 6004 to be less than 6000\n ❯ tests/parallelization/productive-waiting.test.ts:427:22\n    425| \n    426|     // Duration should be ~5s (dependency wait), not 9s (5s + 4s)\n    427|     expect(duration).toBeLessThan(6000);\n       |                      ^\n    428|     expect(duration).toBeGreaterThan(4500);\n    429|   }, 10000);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯\n\n FAIL  tests/parallelization/productive-waiting.test.ts > Dependency Waiting Productivity > should timeout if dependency never resolves\nError: Test timed out in 15000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/productive-waiting.test.ts:488:3\n    486|   // ===== TIMEOUT HANDLING TEST =====\n    487| \n    488|   it('should timeout if dependency never resolves', async () => {\n       |   ^\n    489|     const sprint = new SprintCoordinatorEnhanced(\n    490|       {\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯\n\n",
    "performance_benchmarks/performance-benchmarks: \n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n",
    "performance_benchmarks/performance-benchmarks: \n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n",
    "performance_benchmarks/performance-benchmarks: \n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 3 independent sprints in <40min (46.7% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:363:3\n    361|   // ===== TEST 1: 3 INDEPENDENT SPRINTS =====\n    362| \n    363|   it('should execute 3 independent sprints in <40min (46.7% faster)', …\n       |   ^\n    364|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    365| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 5 mixed sprints in <60min (52% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:425:3\n    423|   // ===== TEST 2: 5 MIXED SPRINTS WITH DEPENDENCIES =====\n    424| \n    425|   it('should execute 5 mixed sprints in <60min (52% faster)', async ()…\n       |   ^\n    426|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    427| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should execute 10 sprints in <100min (60% faster)\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:506:3\n    504|   // ===== TEST 3: 10 SPRINTS MAX SCALE =====\n    505| \n    506|   it('should execute 10 sprints in <100min (60% faster)', async () => {\n       |   ^\n    507|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    508| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should maintain low coordination overhead at scale\nError: Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".\n ❯ tests/parallelization/performance-benchmarks.test.ts:622:3\n    620|   // ===== TEST 4: COORDINATION OVERHEAD ANALYSIS =====\n    621| \n    622|   it('should maintain low coordination overhead at scale', async () =>…\n       |   ^\n    623|     const coordinator = new SprintExecutionCoordinator(redisClient);\n    624| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯\n\n FAIL  tests/parallelization/performance-benchmarks.test.ts > Sprint Parallelization Performance Benchmarks > should detect resource conflicts in parallel execution\nAssertionError: expected 0 to be greater than 0\n ❯ tests/parallelization/performance-benchmarks.test.ts:685:30\n    683| \n    684|     // Should detect port conflict\n    685|     expect(conflicts.length).toBeGreaterThan(0);\n       |                              ^\n    686|     expect(conflicts[0].type).toBe('port');\n    687|     expect(conflicts[0].sprints).toContain('sprint-1');\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯\n\n"
  ],
  "warnings": []
}