#!/usr/bin/env node
/**
 * CVE-2025-001 Fix Demonstration
 *
 * Demonstrates the security fix for iteration limit validation
 * that prevents DoS attacks via excessive iteration counts.
 */

import { IterationTracker } from '../src/coordination/iteration-tracker.js';

console.log('CVE-2025-001 Fix Demonstration');
console.log('='.repeat(60));
console.log();

// Scenario 1: Normal usage (valid limits)
console.log('✓ Scenario 1: Normal usage with valid limits');
try {
  const tracker1 = new IterationTracker({
    phaseId: 'demo-phase-1',
    loop2Max: 5,
    loop3Max: 10,
  });
  console.log(`  Created tracker with loop2Max=${tracker1.loop2Max}, loop3Max=${tracker1.loop3Max}`);
} catch (error) {
  console.log(`  ERROR: ${error.message}`);
}
console.log();

// Scenario 2: Edge case - minimum valid values
console.log('✓ Scenario 2: Minimum valid boundary values');
try {
  const tracker2 = new IterationTracker({
    phaseId: 'demo-phase-2',
    loop2Max: 1,
    loop3Max: 1,
  });
  console.log(`  Created tracker with loop2Max=${tracker2.loop2Max}, loop3Max=${tracker2.loop3Max}`);
} catch (error) {
  console.log(`  ERROR: ${error.message}`);
}
console.log();

// Scenario 3: Edge case - maximum valid values
console.log('✓ Scenario 3: Maximum valid boundary values');
try {
  const tracker3 = new IterationTracker({
    phaseId: 'demo-phase-3',
    loop2Max: 100,
    loop3Max: 100,
  });
  console.log(`  Created tracker with loop2Max=${tracker3.loop2Max}, loop3Max=${tracker3.loop3Max}`);
} catch (error) {
  console.log(`  ERROR: ${error.message}`);
}
console.log();

// Scenario 4: Attack scenario - DoS via excessive loop2Max
console.log('✗ Scenario 4: DoS attack attempt - excessive loop2Max');
try {
  const tracker4 = new IterationTracker({
    phaseId: 'attack-phase-1',
    loop2Max: 1000000, // Would cause resource exhaustion
  });
  console.log(`  ERROR: Attack succeeded - created tracker with loop2Max=${tracker4.loop2Max}`);
} catch (error) {
  console.log(`  ✓ Attack blocked: ${error.message}`);
}
console.log();

// Scenario 5: Attack scenario - DoS via excessive loop3Max
console.log('✗ Scenario 5: DoS attack attempt - excessive loop3Max');
try {
  const tracker5 = new IterationTracker({
    phaseId: 'attack-phase-2',
    loop3Max: 999999, // Would cause resource exhaustion
  });
  console.log(`  ERROR: Attack succeeded - created tracker with loop3Max=${tracker5.loop3Max}`);
} catch (error) {
  console.log(`  ✓ Attack blocked: ${error.message}`);
}
console.log();

// Scenario 6: Invalid input - negative value
console.log('✗ Scenario 6: Invalid input - negative value');
try {
  const tracker6 = new IterationTracker({
    phaseId: 'invalid-phase-1',
    loop2Max: -5,
  });
  console.log(`  ERROR: Accepted negative value - created tracker with loop2Max=${tracker6.loop2Max}`);
} catch (error) {
  console.log(`  ✓ Invalid input rejected: ${error.message}`);
}
console.log();

// Scenario 7: Invalid input - floating point
console.log('✗ Scenario 7: Invalid input - floating point');
try {
  const tracker7 = new IterationTracker({
    phaseId: 'invalid-phase-2',
    loop2Max: 3.5,
  });
  console.log(`  ERROR: Accepted float - created tracker with loop2Max=${tracker7.loop2Max}`);
} catch (error) {
  console.log(`  ✓ Invalid input rejected: ${error.message}`);
}
console.log();

// Scenario 8: Invalid input - zero (below minimum)
console.log('✗ Scenario 8: Invalid input - zero value');
try {
  const tracker8 = new IterationTracker({
    phaseId: 'invalid-phase-3',
    loop2Max: 0,
  });
  console.log(`  ERROR: Accepted zero - created tracker with loop2Max=${tracker8.loop2Max}`);
} catch (error) {
  console.log(`  ✓ Invalid input rejected: ${error.message}`);
}
console.log();

console.log('='.repeat(60));
console.log('Security Validation Complete');
console.log();
console.log('Summary:');
console.log('- Valid inputs (1-100): ✓ Accepted');
console.log('- Invalid inputs (<1, >100, non-integer): ✓ Rejected');
console.log('- DoS attack vectors (excessive values): ✓ Blocked');
console.log();
console.log('CVE-2025-001 fix is working correctly!');
