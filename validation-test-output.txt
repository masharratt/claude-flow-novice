
> claude-flow-novice@1.6.6 test
> NODE_OPTIONS='--experimental-vm-modules --max-old-space-size=16384' jest --config=config/jest/jest.config.js --bail --maxWorkers=1 --forceExit

(node:32650) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    
    Testing: Basic Rust Binary

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1023:17)

  console.log
      Expected: Rust=true (0.95)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1096:17)

  console.log
      Detected: Rust=true (1.000)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1097:17)

  console.log
      Result: ‚úÖ CORRECT

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1098:17)

  console.log
      Detection time: 52ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1099:17)

  console.log
    
    Testing: Rust Library with Tests

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1023:17)

  console.log
      Expected: Rust=true (0.98)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1096:17)

  console.log
      Detected: Rust=true (1.000)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1097:17)

  console.log
      Result: ‚ùå INCORRECT

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1098:17)

  console.log
      Detection time: 78ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1099:17)

  console.log
    
    Testing: Advanced Rust Project

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1023:17)

  console.log
      Expected: Rust=true (1)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1096:17)

  console.log
      Detected: Rust=true (1.000)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1097:17)

  console.log
      Result: ‚ùå INCORRECT

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1098:17)

  console.log
      Detection time: 91ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1099:17)

  console.log
    
    Testing: Rust Workspace

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1023:17)

  console.log
      Expected: Rust=true (0.9)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1096:17)

  console.log
      Detected: Rust=false (0.600)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1097:17)

  console.log
      Result: ‚ùå INCORRECT

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1098:17)

  console.log
      Detection time: 60ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1099:17)

  console.log
    
    Testing: WebAssembly Rust Project

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1023:17)

  console.log
      Expected: Rust=true (0.88)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1096:17)

  console.log
      Detected: Rust=true (1.000)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1097:17)

  console.log
      Result: ‚úÖ CORRECT

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1098:17)

  console.log
      Detection time: 60ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1099:17)

  console.log
    
    ü¶Ä Rust Detection Results:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1104:15)

  console.log
      Accuracy: 40.0% (2/5)

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1105:15)

  console.log
      Target: >95%

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1106:15)

  console.log
      Result: ‚ùå FAILED

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1107:15)

(node:32650) [DEP0147] DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead
  console.log
    Custom Build Script: Detected build tools: cargo, build-script

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1465:17)

  console.log
    Cross Compilation: Detected build tools: cargo, cross

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1465:17)

  console.log
    Byzantine Consensus Results:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1662:15)

  console.log
      Consensus ID: rust-prop-1760044197817

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1663:15)

  console.log
      Total Votes: 5

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1664:15)

  console.log
      Byzantine Nodes: 1

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1665:15)

  console.log
      Confidence: 0.800

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1666:15)

  console.log
      Result: ‚úÖ APPROVED

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1667:15)

  console.log
    Poor Framework Consensus Results:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1699:15)

  console.log
      Consensus ID: rust-prop-1760044197829

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1700:15)

  console.log
      Confidence: 0.000

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1701:15)

  console.log
      Result: ‚ùå REJECTED

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1702:15)

  console.log
    JavaScript Project with Rust-like Files: Expected=false, Got=false, Confidence=0.000

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1879:17)

  console.log
    Python Project: Expected=false, Got=false, Confidence=0.100

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1879:17)

  console.log
    C++ Project with Similar Structure: Expected=false, Got=false, Confidence=0.100

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1879:17)

  console.log
    Empty Directory: Expected=false, Got=false, Confidence=0.000

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1879:17)

  console.log
    Directory with Only Text Files: Expected=false, Got=false, Confidence=0.000

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1879:17)

  console.log
    
    üìä False Positive Rate Analysis:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1884:15)

  console.log
      False Positives: 0/5

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1885:15)

  console.log
      False Positive Rate: 0.0%

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1886:15)

  console.log
      Target: <5%

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1887:15)

  console.log
      Result: ‚úÖ PASSED

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1888:15)

  console.log
    
    ‚ö° Large Project Performance:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1933:15)

  console.log
      Project files: 61

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1934:15)

  console.log
      Setup time: 715ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1935:15)

  console.log
      Detection time: 62ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1936:15)

  console.log
      Target: <2000ms

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1937:15)

  console.log
      Result: ‚úÖ PASSED

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1938:15)

  console.log
    
    üìã Comprehensive Metrics Report:

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1992:15)

  console.log
      Source Files: 3

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1993:15)

  console.log
      Test Files: 2

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1994:15)

  console.log
      Dependencies: 8

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1995:15)

  console.log
      Test Frameworks: 4

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1996:15)

  console.log
      Quality Tools: 2

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1997:15)

  console.log
      Build Tools: 1

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1998:15)

  console.log
      Test Coverage Ratio: 0.67

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1999:15)

  console.log
      Project Complexity: 2/5

      at Object.<anonymous> (tests/validation/rust-validation.test.js:2000:15)

  console.log
      Suggestions: 0

      at Object.<anonymous> (tests/validation/rust-validation.test.js:2015:15)

  console.log
      Warnings: 1

      at Object.<anonymous> (tests/validation/rust-validation.test.js:2016:15)

FAIL tests/validation/rust-validation.test.js (7.244 s)
  Rust Validation Test Suite
    Rust Framework Detection (>95% accuracy)
      ‚úï should detect Rust projects with >95% accuracy (991 ms)
    Cargo Test Execution Validation
      ‚úì should validate cargo test execution capabilities (183 ms)
      ‚úï should handle complex cargo test configurations (181 ms)
    Rust Build Validation
      ‚úì should validate different Rust build configurations (176 ms)
    Quality Checks and Linting
      ‚úì should validate Rust quality tools configuration (185 ms)
      ‚úì should identify quality issues and provide suggestions (137 ms)
    Byzantine Consensus Validation Scenarios
      ‚úì should validate Rust frameworks through Byzantine consensus (12 ms)
      ‚úì should reject poor quality Rust frameworks via consensus (13 ms)
      ‚úï should handle Byzantine node failures gracefully (9 ms)
      ‚úï should maintain consensus integrity with network partitions (10 ms)
    Performance and False Positive Rate (<5%)
      ‚úì should maintain <5% false completion rate (393 ms)
      ‚úï should handle large projects efficiently (980 ms)
      ‚úì should provide comprehensive metrics and reporting (310 ms)

  ‚óè Rust Validation Test Suite ‚Ä∫ Rust Framework Detection (>95% accuracy) ‚Ä∫ should detect Rust projects with >95% accuracy

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 95
    Received:    40

      1107 |       console.log(`  Result: ${accuracy >= 95 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      1108 |
    > 1109 |       expect(accuracy).toBeGreaterThanOrEqual(95);
           |                        ^
      1110 |
      1111 |       // Verify reasonable detection times (<2s average)
      1112 |       const avgDetectionTime = detectionResults

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1109:24)

  ‚óè Rust Validation Test Suite ‚Ä∫ Cargo Test Execution Validation ‚Ä∫ should handle complex cargo test configurations

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 3
    Received:    2

      1366 |
      1367 |       // Should detect complex project structure
    > 1368 |       expect(result.metrics.projectComplexity).toBeGreaterThanOrEqual(3);
           |                                                ^
      1369 |       expect(result.metrics.testFiles).toBeGreaterThanOrEqual(3);
      1370 |
      1371 |       // Should have coverage tool configured

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1368:48)

  ‚óè Rust Validation Test Suite ‚Ä∫ Byzantine Consensus Validation Scenarios ‚Ä∫ should handle Byzantine node failures gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 1

      1740 |       // but with lower confidence or might fail gracefully
      1741 |       expect(validationResult.byzantineValidated).toBe(true);
    > 1742 |       expect(validationResult.byzantineNodes).toBe(3);
           |                                               ^
      1743 |
      1744 |       if (validationResult.success) {
      1745 |         // If it succeeds, confidence should be low due to Byzantine interference

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1742:47)

  ‚óè Rust Validation Test Suite ‚Ä∫ Byzantine Consensus Validation Scenarios ‚Ä∫ should maintain consensus integrity with network partitions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1798 |
      1799 |         if (test.expectedSuccess) {
    > 1800 |           expect(result.success).toBe(true);
           |                                  ^
      1801 |           expect(result.confidence).toBeGreaterThan(0.5);
      1802 |         } else {
      1803 |           // Severe partitions might cause consensus failure

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1800:34)

  ‚óè Rust Validation Test Suite ‚Ä∫ Performance and False Positive Rate (<5%) ‚Ä∫ should handle large projects efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1938 |       console.log(`  Result: ${detectionTime < 2000 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      1939 |
    > 1940 |       expect(result.isRustProject).toBe(true);
           |                                    ^
      1941 |       expect(result.confidence).toBeGreaterThan(0.9);
      1942 |       expect(detectionTime).toBeLessThan(2000); // Should complete within 2 seconds
      1943 |       expect(result.metrics.projectComplexity).toBeGreaterThan(3); // Should detect high complexity

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1940:36)

Summary of all failing tests
FAIL tests/validation/rust-validation.test.js (7.244 s)
  ‚óè Rust Validation Test Suite ‚Ä∫ Rust Framework Detection (>95% accuracy) ‚Ä∫ should detect Rust projects with >95% accuracy

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 95
    Received:    40

      1107 |       console.log(`  Result: ${accuracy >= 95 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      1108 |
    > 1109 |       expect(accuracy).toBeGreaterThanOrEqual(95);
           |                        ^
      1110 |
      1111 |       // Verify reasonable detection times (<2s average)
      1112 |       const avgDetectionTime = detectionResults

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1109:24)

  ‚óè Rust Validation Test Suite ‚Ä∫ Cargo Test Execution Validation ‚Ä∫ should handle complex cargo test configurations

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 3
    Received:    2

      1366 |
      1367 |       // Should detect complex project structure
    > 1368 |       expect(result.metrics.projectComplexity).toBeGreaterThanOrEqual(3);
           |                                                ^
      1369 |       expect(result.metrics.testFiles).toBeGreaterThanOrEqual(3);
      1370 |
      1371 |       // Should have coverage tool configured

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1368:48)

  ‚óè Rust Validation Test Suite ‚Ä∫ Byzantine Consensus Validation Scenarios ‚Ä∫ should handle Byzantine node failures gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 1

      1740 |       // but with lower confidence or might fail gracefully
      1741 |       expect(validationResult.byzantineValidated).toBe(true);
    > 1742 |       expect(validationResult.byzantineNodes).toBe(3);
           |                                               ^
      1743 |
      1744 |       if (validationResult.success) {
      1745 |         // If it succeeds, confidence should be low due to Byzantine interference

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1742:47)

  ‚óè Rust Validation Test Suite ‚Ä∫ Byzantine Consensus Validation Scenarios ‚Ä∫ should maintain consensus integrity with network partitions

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1798 |
      1799 |         if (test.expectedSuccess) {
    > 1800 |           expect(result.success).toBe(true);
           |                                  ^
      1801 |           expect(result.confidence).toBeGreaterThan(0.5);
      1802 |         } else {
      1803 |           // Severe partitions might cause consensus failure

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1800:34)

  ‚óè Rust Validation Test Suite ‚Ä∫ Performance and False Positive Rate (<5%) ‚Ä∫ should handle large projects efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      1938 |       console.log(`  Result: ${detectionTime < 2000 ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
      1939 |
    > 1940 |       expect(result.isRustProject).toBe(true);
           |                                    ^
      1941 |       expect(result.confidence).toBeGreaterThan(0.9);
      1942 |       expect(detectionTime).toBeLessThan(2000); // Should complete within 2 seconds
      1943 |       expect(result.metrics.projectComplexity).toBeGreaterThan(3); // Should detect high complexity

      at Object.<anonymous> (tests/validation/rust-validation.test.js:1940:36)


Test Suites: 1 failed, 1 of 365 total
Tests:       5 failed, 8 passed, 13 total
Snapshots:   0 total
Time:        8.973 s, estimated 52 s
Ran all test suites.
