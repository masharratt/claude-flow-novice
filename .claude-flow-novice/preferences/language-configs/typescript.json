{
  "_description": "TypeScript Language Configuration - Defines TypeScript project patterns and type-safe development practices",
  "_purpose": "This configuration enables TypeScript project detection and applies TypeScript-specific tooling and best practices",
  "_used_in": [
    "src/language/language-detector.js (TypeScript project detection)",
    "src/language/framework-detector.js (React/Angular/Node TypeScript detection)",
    "src/hooks/enhanced/personalization-hooks.js (TypeScript-specific behavior)"
  ],

  "language": "typescript",
  "_language_description": "Primary language identifier for TypeScript projects",

  "frameworks": ["node", "express", "react", "angular", "next", "nest"],
  "_frameworks_description": "Common TypeScript frameworks that indicate specialized project architectures",

  "best_practices": {
    "_description": "TypeScript development standards and type-safe coding practices",
    "file_structure": {
      "src": "Source code with types",
      "tests": "Test files (Jest, Vitest)",
      "docs": "Documentation",
      "config": "Configuration files",
      "types": "Type definitions"
    },
    "linting": {
      "eslint": true,
      "prettier": true,
      "typescript_eslint": true,
      "config_files": [".eslintrc.json", ".prettierrc.json", "tsconfig.json"]
    },
    "testing": {
      "framework": "jest",
      "patterns": ["*.test.ts", "*.spec.ts"],
      "coverage": true
    },
    "dependencies": {
      "package_manager": "npm",
      "dev_dependencies": ["typescript", "@types/node", "eslint", "prettier", "jest"],
      "scripts": {
        "build": "tsc",
        "test": "jest",
        "lint": "eslint src/",
        "typecheck": "tsc --noEmit"
      }
    }
  },
  "claude_md_template": {
    "concurrent_patterns": "Use Promise.all(), proper async/await with types",
    "error_handling": "Define error types, use Result<T, E> patterns",
    "code_style": "Strict TypeScript config, interface over type when possible",
    "testing": "Type-safe tests, mock with proper typing",
    "performance": "Leverage tree shaking, use strict compiler options"
  }
}