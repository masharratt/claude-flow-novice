{
  "env": {
    "CLAUDE_FLOW_AUTO_COMMIT": "false",
    "CLAUDE_FLOW_AUTO_PUSH": "false",
    "CLAUDE_FLOW_HOOKS_ENABLED": "true",
    "CLAUDE_FLOW_TELEMETRY_ENABLED": "true",
    "CLAUDE_FLOW_REMOTE_EXECUTION": "true",
    "CLAUDE_FLOW_CHECKPOINTS_ENABLED": "true",
    "ANTHROPIC_SUBSCRIPTION_LIMIT": "100"
  },
  "permissions": {
    "allow": [
      "Bash(npx claude-flow-novice :*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test :*)",
      "Bash(git status)",
      "Bash(git diff :*)",
      "Bash(git log :*)",
      "Bash(git add :*)",
      "Bash(git commit :*)",
      "Bash(git push)",
      "Bash(git config :*)",
      "Bash(git tag :*)",
      "Bash(git branch :*)",
      "Bash(git checkout :*)",
      "Bash(git stash :*)",
      "Bash(jq :*)",
      "Bash(node :*)",
      "Bash(which :*)",
      "Bash(pwd)",
      "Bash(ls :*)",
      "Bash(npm run build:*)",
      "Bash(node:*)",
      "Bash(npm run build:types:*)",
      "mcp__ruv-swarm",
      "mcp__claude-flow@alpha",
      "mcp__flow-nexus",
      "WebSearch",
      "mcp__claude-flow-novice__swarm_init"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(eval :*)"
    ]
  },
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"ðŸš€ Session starting - cleaning up idle sessions...\"; bash scripts/cleanup-idle-sessions.sh 2>/dev/null || echo \"Cleanup skipped (not in project root)\"; echo \"\"'"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'CMD=$(cat | jq -r \".tool_input.command // empty\"); if echo \"$CMD\" | grep -q \"find /mnt/c\"; then echo \"ðŸ”´ BLOCKED: find on /mnt/c paths forbidden (causes memory leak - use Glob tool instead)\" >&2; exit 1; fi; echo \"[Hook] Command validated\" >&2; exit 0'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'FILE=$(cat | jq -r \".tool_input.file_path // .tool_input.path // empty\"); if echo \"$FILE\" | grep -qE \"package\\.json$|package-lock\\.json$|yarn\\.lock$|node_modules/|\\.git/|\\.log$|dist/|build/|\\.db$\"; then echo \"[Hook] Skipping protected file: $FILE\" >&2; exit 0; fi; echo \"[Hook] File edit validated\" >&2; exit 0'"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"[Hook] Command completed\" >&2; exit 0'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'FILE=$(cat | jq -r \".tool_input.file_path // .tool_input.path // empty\"); if echo \"$FILE\" | grep -qE \"package\\.json$|package-lock\\.json$|yarn\\.lock$|node_modules/|\\.git/|\\.log$|dist/|build/|\\.db$\"; then echo \"[Hook] Skipping protected file: $FILE\" >&2; exit 0; fi; echo \"[Hook] File edit completed\" >&2; exit 0'"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'export PATH=\"$HOME/bin:$PATH\"; INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"ðŸ”„ PreCompact Guidance:\"; echo \"ðŸ“‹ IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   â€¢ 54 available agents and concurrent usage patterns\"; echo \"   â€¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   â€¢ SPARC methodology workflows with batchtools optimization\"; echo \"   â€¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"ðŸŽ¯ Custom compact instructions: $CUSTOM\"; fi; echo \"\"; echo \"ðŸ§¹ Cleaning up idle sessions...\"; timeout 30s bash scripts/cleanup-idle-sessions.sh 2>/dev/null | tail -1 || echo \"Cleanup skipped\"; echo \"âœ… Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'echo \"ðŸ”„ Auto-Compact Guidance (Context Window Full):\"; echo \"ðŸ“‹ CRITICAL: Before compacting, ensure you understand:\"; echo \"   The claude.md file of the directory you are working in\"; echo \"   â€¢ Concurrent execution patterns from CLAUDE.md\"; echo \"   â€¢ the CFN loop \"; echo \"   â€¢ Swarm coordination strategies for complex tasks\"; echo \"âš¡ Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"\"; echo \"ðŸ§¹ Cleaning up idle sessions...\"; timeout 30s bash scripts/cleanup-idle-sessions.sh 2>/dev/null | tail -1 || echo \"Cleanup skipped\"; echo \"\"; echo \"ðŸ“Š Recent Metrics Summary (Last 60 min):\"; timeout 30s node src/slash-commands/metrics-summary.js --minutes=60 2>/dev/null || echo \"   Metrics unavailable\"; echo \"âœ… Auto-compact proceeding with full agent context\"'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"[Hook] Session ending\" >&2; exit 0'"
          }
        ]
      }
    ]
  },
  "includeCoAuthoredBy": true,
  "enabledMcpjsonServers": [
    "claude-flow-novice",
    "supabase",
    "n8n-mcp"
  ],
  "tieredRouting": {
    "enabled": true
  }
}
