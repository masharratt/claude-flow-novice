{
  "epic_name": "production-blocking-coordination",
  "epic_goal": "Production-ready blocking coordination for real-world CFN Loop scenarios with reliable signal delivery, timeout enforcement, dead coordinator detection, and network partition resilience",
  "scope": {
    "in_scope": [
      "Signal ACK protocol implementation",
      "Dead coordinator detection and enforcement",
      "Redis health check and reconnection logic",
      "Extended timeout testing and validation",
      "Swarm state manager integration",
      "Agent lifecycle hooks for blocking events",
      "CFN Loop state machine integration",
      "Observability dashboard and monitoring",
      "Auto-recovery mechanisms",
      "Prometheus metrics integration",
      "Comprehensive documentation and training materials"
    ],
    "out_of_scope": [
      "Redis Cluster implementation (future work)",
      "Redis Sentinel HA setup (noted as future enhancement)",
      "Multi-region coordination",
      "Advanced load balancing",
      "Custom signal transport mechanisms beyond Redis"
    ],
    "risk_profile": "critical-high-risk"
  },
  "phases": [
    {
      "phase_id": "1",
      "phase_name": "Core Fixes (P0)",
      "dependencies": [],
      "deliverables": [
        "Signal ACK mechanism implemented",
        "Dead coordinator detection enforced",
        "Redis health check added",
        "3-minute timeout test passing",
        "All agent profiles migrated from MCP to CLI commands",
        "Documentation updated"
      ],
      "sprints": [
        {
          "sprint_id": "1.1",
          "sprint_name": "Signal ACK Protocol",
          "deliverables": [
            "Signal delivery via Redis SETEX",
            "Coordinator ACK mechanism with timestamp and iteration count",
            "Sender verification of ACK receipt",
            "Signal persistence with 24h TTL",
            "Idempotent signal handling for duplicates"
          ],
          "estimated_agents": 3
        },
        {
          "sprint_id": "1.2",
          "sprint_name": "Dead Coordinator Detection",
          "deliverables": [
            "Warning system for stale heartbeats (>120s)",
            "Escalation logic after 3 warnings",
            "Critical exit path for dead coordinator scenarios",
            "Heartbeat continuity validation",
            "Orphan cleanup on detection"
          ],
          "estimated_agents": 2
        },
        {
          "sprint_id": "1.3",
          "sprint_name": "Redis Health Check",
          "deliverables": [
            "Periodic health check every 10 iterations (50s)",
            "Redis PING validation",
            "Auto-reconnect with exponential backoff",
            "Connection pool retry strategy (max 3 attempts)",
            "Error logging and recovery metrics"
          ],
          "estimated_agents": 2
        },
        {
          "sprint_id": "1.4",
          "sprint_name": "Extended Timeout Testing",
          "deliverables": [
            "Configurable timeout test (3-minute baseline)",
            "5-minute test without signal to verify timeout",
            "Timeout trigger validation at configured time",
            "State cleanup on timeout",
            "Production 30-minute timeout verification"
          ],
          "estimated_agents": 3
        },
        {
          "sprint_id": "1.5",
          "sprint_name": "Agent Profile MCP → CLI Migration",
          "deliverables": [
            "Audit all agent profiles for MCP command usage",
            "Update mesh-coordinator.md: Remove mcp__claude-flow references",
            "Update all coordinator agents: Replace MCP tools with CLI equivalents",
            "Replace mcp__claude-flow__swarm_init → node test-swarm-direct.js",
            "Replace mcp__claude-flow__agent_spawn → Task tool (already CLI native)",
            "Update tool lists in agent frontmatter (remove MCP, keep CLI tools)",
            "Update example commands in agent documentation",
            "Verify all agents use: SlashCommand, Bash, Task (not MCP tools)",
            "Integration tests: Spawn agents, verify no MCP command errors"
          ],
          "estimated_agents": 4,
          "notes": [
            "MCP deprecated in v2.0.0 (Oct 9, 2025)",
            "CLI commands are native and more reliable",
            "Agents affected: mesh-coordinator, hierarchical-coordinator, adaptive-coordinator",
            "Migration path documented in MCP_DEPRECATION_NOTICE.md",
            "Critical for Phase 2 integration (agents must use correct tools)"
          ]
        },
        {
          "sprint_id": "1.6",
          "sprint_name": "Byzantine Validator Integration - Real Agent Spawning",
          "deliverables": [
            "Replace mock spawnValidatorAgents() with real Task tool calls",
            "Replace mock spawnSimpleValidators() with real Task tool calls",
            "Replace mock spawnProductOwner() with real Task tool calls",
            "Implement validator response parsing from actual agent output",
            "Add error handling for validator spawn failures",
            "Add fallback validators for resilience",
            "Integration tests: Spawn validators, verify confidence scoring",
            "End-to-end test: Loop 3 → Loop 2 (Byzantine) → Loop 4 (Product Owner)",
            "Verify Byzantine consensus with real validator feedback",
            "Verify Product Owner receives validator results for GOAP decisions"
          ],
          "estimated_agents": 3,
          "notes": [
            "Builds on Sprint 1.2 Byzantine consensus adapter implementation",
            "Architecture already in place (src/cfn-loop/cfn-loop-orchestrator.ts)",
            "Helper methods implemented: prepareValidationContext, generateValidatorReasoning",
            "Fallback mechanisms ready for validator spawn failures",
            "Critical for Loop 2 → Loop 4 feedback flow in CFN Loop",
            "Enables real validator feedback to Product Owner for autonomous decisions",
            "Removes last remaining mock implementations from CFN Loop"
          ],
          "dependencies": ["Sprint 1.2 - Byzantine consensus adapter complete"],
          "technical_debt_resolved": [
            "Mock validator responses removed (lines 738-836 in cfn-loop-orchestrator.ts)",
            "Mock Product Owner removed (line 1244)",
            "Real agent spawning replaces hardcoded confidence scores"
          ]
        }
      ],
      "success_criteria": [
        "Consensus score improves from 0.83 to ≥0.90",
        "All P0 failure modes mitigated",
        "Extended timeout test passes at configured intervals",
        "Signal delivery success rate ≥99.99%",
        "Dead coordinator detection within 2 minutes",
        "All agent profiles use CLI commands (zero MCP references)",
        "Byzantine validators use real agent spawning (zero mock responses)",
        "Product Owner receives real validator feedback for GOAP decisions",
        "Loop 2 → Loop 4 integration complete with real agents"
      ]
    },
    {
      "phase_id": "2",
      "phase_name": "Integration (P1)",
      "dependencies": ["1"],
      "deliverables": [
        "Swarm state manager integration",
        "Agent lifecycle hooks implemented",
        "CFN Loop state machine integration",
        "Integration tests passing"
      ],
      "sprints": [
        {
          "sprint_id": "2.1",
          "sprint_name": "Swarm State Manager Integration",
          "deliverables": [
            "saveBlockingState() method in swarm-state-manager.js",
            "Blocking state persistence to Redis with 24h TTL",
            "State recovery after crash/restart",
            "State transitions: waiting → complete → failed",
            "Integration with existing state snapshots"
          ],
          "estimated_agents": 4
        },
        {
          "sprint_id": "2.2",
          "sprint_name": "Agent Lifecycle Hooks",
          "deliverables": [
            "on_blocking_start hook in agent profiles",
            "on_signal_received hook in agent profiles",
            "on_blocking_timeout hook in agent profiles",
            "Hook execution validation and error handling",
            "Custom blocking behavior per agent type"
          ],
          "estimated_agents": 3
        },
        {
          "sprint_id": "2.3",
          "sprint_name": "CFN Loop State Machine Integration",
          "deliverables": [
            "CFN Loop state object with loop status tracking",
            "Loop 3 → Loop 2 transition coordination",
            "Loop 2 validator blocking state awareness",
            "Loop 4 Product Owner decision with blocking status",
            "Phase transition blocking enforcement"
          ],
          "estimated_agents": 4
        }
      ],
      "success_criteria": [
        "Blocking state persists correctly to Redis",
        "Agent lifecycle hooks execute without errors",
        "CFN Loop transitions respect blocking dependencies",
        "Integration tests achieve ≥90% coverage",
        "State recovery works after simulated crashes"
      ]
    },
    {
      "phase_id": "3",
      "phase_name": "Production Hardening (P1)",
      "dependencies": ["2"],
      "deliverables": [
        "Monitoring dashboard deployed",
        "Auto-recovery scripts operational",
        "Prometheus integration complete",
        "Chaos tests passing"
      ],
      "sprints": [
        {
          "sprint_id": "3.1",
          "sprint_name": "Observability Dashboard",
          "deliverables": [
            "Real-time active blocking coordinators view",
            "Average blocking duration metrics",
            "Signal delivery latency tracking",
            "Heartbeat status monitoring",
            "Timeout events visualization"
          ],
          "estimated_agents": 3
        },
        {
          "sprint_id": "3.2",
          "sprint_name": "Auto-Recovery Mechanisms",
          "deliverables": [
            "On-demand cleanup script: scripts/cleanup-blocking-coordination.sh",
            "Cleanup finds and removes stale coordinator state (>10 min heartbeat)",
            "Systemd timer unit files for production scheduling (5-minute interval)",
            "Cron job configuration for simpler deployments",
            "npm script for manual execution: npm run cleanup:blocking",
            "Cleanup logs to ~/.claude-flow/logs/blocking-cleanup.log",
            "Failed signal retry with exponential backoff (max 3 attempts)",
            "Dead coordinator escalation to parent (spawn NEW coordinator)",
            "Integration tests verify cleanup does not affect active coordinators"
          ],
          "estimated_agents": 3,
          "notes": [
            "Uses on-demand script pattern (not background process)",
            "Cleanup via cron/systemd timer, not per-session daemon",
            "Cannot revive terminated coordinators (spawns fresh replacements)",
            "Standard Unix pattern: cleanup-idle-sessions.sh model"
          ]
        },
        {
          "sprint_id": "3.3",
          "sprint_name": "Prometheus Integration",
          "deliverables": [
            "blocking_coordinators_total metric",
            "blocking_duration_seconds histogram",
            "signal_delivery_latency_seconds histogram",
            "heartbeat_failures_total counter",
            "timeout_events_total counter",
            "Grafana dashboard templates"
          ],
          "estimated_agents": 3
        },
        {
          "sprint_id": "3.4",
          "sprint_name": "Chaos Engineering Tests",
          "deliverables": [
            "Random process kill test (10-minute duration)",
            "Redis restart test (every 2 minutes for 10 minutes)",
            "Clock skew simulation (±5 minutes)",
            "Network partition test with iptables",
            "100 concurrent coordinators stress test"
          ],
          "estimated_agents": 5
        }
      ],
      "success_criteria": [
        "Dashboard shows real-time metrics with <5s latency",
        "Auto-recovery success rate ≥95%",
        "All Prometheus metrics collecting correctly",
        "Chaos tests pass with ≥90% success rate",
        "System uptime ≥99.9% during chaos testing"
      ]
    },
    {
      "phase_id": "4",
      "phase_name": "Documentation & Training (P2)",
      "dependencies": ["3"],
      "deliverables": [
        "Complete documentation",
        "Training materials",
        "Knowledge base articles"
      ],
      "sprints": [
        {
          "sprint_id": "4.1",
          "sprint_name": "Technical Documentation",
          "deliverables": [
            "Blocking coordination pattern guide",
            "Failure recovery playbook",
            "Monitoring runbook with response procedures",
            "Integration examples for CFN Loop",
            "API reference documentation"
          ],
          "estimated_agents": 2
        },
        {
          "sprint_id": "4.2",
          "sprint_name": "Training Materials",
          "deliverables": [
            "Video walkthrough of blocking coordination",
            "Troubleshooting guide for common issues",
            "Best practices document",
            "Interactive tutorials",
            "FAQ and knowledge base articles"
          ],
          "estimated_agents": 2
        },
        {
          "sprint_id": "4.3",
          "sprint_name": "Production Readiness Review",
          "deliverables": [
            "Staging deployment validation (2-week period)",
            "Performance benchmark comparison (before/after)",
            "Security audit and compliance check",
            "Final consensus validation ≥0.90",
            "Production deployment checklist"
          ],
          "estimated_agents": 4
        }
      ],
      "success_criteria": [
        "All documentation reviewed and approved",
        "Training completed for engineering team",
        "Knowledge base searchable and comprehensive",
        "Staging environment stable for 2 weeks",
        "Production validators approve with consensus ≥0.90"
      ]
    }
  ],
  "decision_authority_config": {
    "auto_approve_threshold": 0.90,
    "auto_relaunch_max_iteration": 10,
    "escalation_criteria": [
      "Consensus score <0.90 after 10 Loop 2 iterations",
      "Critical security vulnerability detected",
      "Production uptime falls below 99%",
      "Signal delivery success rate <99.9%",
      "Dead coordinator detection fails >3 times",
      "Redis health check failures exceed 5% of checks",
      "Chaos test success rate <80%",
      "Performance degradation >5% compared to baseline"
    ],
    "auto_defer_criteria": [
      "Phase completion with consensus ≥0.90",
      "All deliverables complete and validated",
      "Success criteria met for phase",
      "No critical blockers identified"
    ],
    "loop_thresholds": {
      "loop3_agent_confidence": 0.75,
      "loop2_validator_consensus": 0.90,
      "loop3_max_iterations": 10,
      "loop2_max_iterations": 10
    },
    "timeout_config": {
      "blocking_timeout_seconds": 1800,
      "heartbeat_interval_seconds": 5,
      "heartbeat_ttl_seconds": 90,
      "dead_coordinator_threshold_seconds": 120,
      "signal_ack_timeout_seconds": 5,
      "redis_reconnect_timeout_seconds": 10
    }
  },
  "metadata": {
    "epic_duration_weeks": 4,
    "total_phases": 4,
    "total_sprints": 15,
    "estimated_total_agents": 47,
    "priority": "P0",
    "status": "planning-complete",
    "requires_approval": true,
    "risk_level": "medium",
    "effort_estimate": "4 weeks (1 engineer)",
    "created_from": "docs/coordination-patterns/production-blocking-coordination-plan.md",
    "version": "1.0.0"
  },
  "test_strategy": {
    "unit_tests": [
      "Blocking loop logic (infinite loop, timeout, signal detection)",
      "Signal mechanism (delivery, persistence, ACK, idempotency)",
      "State management (persistence, recovery, transitions, cleanup)"
    ],
    "integration_tests": [
      "Happy path (5-minute duration)",
      "Timeout trigger (35-minute duration)",
      "Dead coordinator (10-minute duration)",
      "Network partition (10-minute duration)",
      "Signal race condition (30-second duration)"
    ],
    "stress_tests": [
      "100 concurrent coordinators",
      "60-minute long-duration blocking",
      "1000 retry requests queued"
    ],
    "chaos_tests": [
      "Random process kills every 30s for 10 minutes",
      "Redis restarts every 2 minutes for 10 minutes",
      "Clock skew simulation (±5 minutes)"
    ]
  },
  "performance_targets": {
    "signal_latency_p99_ms": 1000,
    "heartbeat_cpu_overhead_percent": 1,
    "redis_operation_latency_ms": 10,
    "concurrent_coordinators_supported": 100,
    "max_swarm_agents": 1000,
    "redis_memory_per_1000_coordinators_mb": 100,
    "uptime_percent": 99.9,
    "signal_delivery_success_percent": 99.99,
    "state_persistence_success_percent": 99.999
  },
  "failure_modes": [
    {
      "mode": "Redis Connection Loss",
      "likelihood": "medium",
      "impact": "critical",
      "detection": "Health check fails",
      "mitigation": "Auto-reconnect + backoff",
      "priority": "P0"
    },
    {
      "mode": "Coordinator Process Crash",
      "likelihood": "medium",
      "impact": "high",
      "detection": "Heartbeat expires",
      "mitigation": "Timeout + orphan cleanup",
      "priority": "P0"
    },
    {
      "mode": "Signal Lost (Network)",
      "likelihood": "low",
      "impact": "critical",
      "detection": "No ACK received",
      "mitigation": "Retry with exponential backoff",
      "priority": "P0"
    },
    {
      "mode": "Signal Sent Before Blocking",
      "likelihood": "low",
      "impact": "critical",
      "detection": "Coordinator never unblocks",
      "mitigation": "Signal persistence (24h TTL)",
      "priority": "P0"
    },
    {
      "mode": "Clock Skew",
      "likelihood": "low",
      "impact": "medium",
      "detection": "Timeout triggers early",
      "mitigation": "Use Redis TIME command",
      "priority": "P1"
    },
    {
      "mode": "Memory Exhaustion",
      "likelihood": "low",
      "impact": "critical",
      "detection": "OOM kills processes",
      "mitigation": "Resource limits + monitoring",
      "priority": "P1"
    },
    {
      "mode": "Stale Heartbeat",
      "likelihood": "medium",
      "impact": "medium",
      "detection": "Heartbeat >2min old",
      "mitigation": "Auto-escalate to timeout",
      "priority": "P1"
    },
    {
      "mode": "Retry Queue Overflow",
      "likelihood": "low",
      "impact": "medium",
      "detection": "Queue length >1000",
      "mitigation": "Rate limiting + backpressure",
      "priority": "P2"
    },
    {
      "mode": "Duplicate Signals",
      "likelihood": "low",
      "impact": "low",
      "detection": "Multiple SETEX calls",
      "mitigation": "Idempotent signal handling",
      "priority": "P2"
    },
    {
      "mode": "Orphaned Blocking State",
      "likelihood": "medium",
      "impact": "medium",
      "detection": "State TTL expires",
      "mitigation": "Automated cleanup script",
      "priority": "P2"
    }
  ]
}
