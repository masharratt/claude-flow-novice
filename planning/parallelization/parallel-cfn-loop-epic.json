{
  "epicId": "parallel-cfn-loop-v1",
  "name": "Parallel CFN Loop Execution with Multi-Sprint Coordination",
  "version": "1.0.0",
  "description": "Enable parallel execution of independent sprints in CFN Loop with intelligent dependency management, test coordination, and resource safety",
  "objectives": [
    "Reduce epic execution time by 50-70% for independent sprints",
    "Maintain quality with â‰¥0.90 consensus across all parallel streams",
    "Prevent resource conflicts (test execution, memory leaks, agent cleanup)",
    "Enable productive waiting for dependent sprints",
    "Provide real-time coordination via Redis pub/sub (10K+ msg/sec)",
    "Enable crash recovery with <5% work loss on VS Code crashes"
  ],
  "dependencies": {
    "infrastructure": [
      "Redis pub/sub coordination (10K+ events/sec)",
      "Event bus system",
      "SQLite memory with ACL",
      "Fleet management (1000+ agents)",
      "Blocking coordination pattern (waitForAcks)"
    ],
    "existing_features": [
      "CFN Loop (Loop 0-4)",
      "Agent lifecycle management",
      "Dependency tracking system",
      "Consensus validation",
      "Product Owner GOAP decision engine"
    ]
  },
  "architecture": {
    "topology": "multi-coordinator-mesh",
    "components": [
      {
        "name": "DependencyAnalyzer",
        "purpose": "Parse epic and generate dependency graph",
        "outputs": ["independent_groups", "sequential_chains", "interface_contracts"]
      },
      {
        "name": "MetaCoordinator",
        "purpose": "Manage multiple sprint coordinators",
        "count": "1 per independent group",
        "responsibilities": ["Spawn sprint coordinators", "Aggregate Loop 4 decisions", "Handle failures"]
      },
      {
        "name": "SprintCoordinator",
        "purpose": "Execute single sprint through CFN Loop",
        "count": "1 per sprint",
        "responsibilities": ["Loop 3 execution", "Loop 2 validation", "Interface publishing"]
      },
      {
        "name": "TestLockCoordinator",
        "purpose": "Global test execution lock",
        "count": "1 (singleton)",
        "responsibilities": ["Acquire test slots", "Queue management", "Force release stale locks"]
      },
      {
        "name": "LifecycleCleanupManager",
        "purpose": "Prevent memory leaks and agent persistence",
        "count": "1 (singleton)",
        "responsibilities": ["Orphan detection", "Force cleanup", "Redis sync"]
      },
      {
        "name": "ConflictResolver",
        "purpose": "Resolve file and resource conflicts",
        "count": "1 per meta-coordinator",
        "responsibilities": ["Merge conflict detection", "Redis lock arbitration", "Interface validation"]
      },
      {
        "name": "RecoveryManager",
        "purpose": "Handle VS Code crashes and state recovery",
        "count": "1 (singleton)",
        "responsibilities": ["Redis state checkpointing", "Crash detection", "State restoration", "Progress recovery"]
      }
    ],
    "communication": {
      "protocol": "Redis pub/sub",
      "channels": [
        "sprint:coordination - Sprint lifecycle events",
        "agent:lifecycle - Agent spawn/cleanup events",
        "test:coordination - Test execution locks",
        "interface:ready - Dependency interface publishing",
        "conflict:detected - Resource conflict alerts"
      ],
      "throughput": "10,000+ messages/sec"
    }
  },
  "sprints": [
    {
      "id": "sprint-0",
      "name": "Phase 0: Crash Recovery & State Persistence",
      "duration_estimate": "3-4 days",
      "dependencies": [],
      "phases": [
        {
          "id": "phase-0.1",
          "name": "Redis State Checkpointing",
          "tasks": [
            "Implement state checkpoint every 30 seconds to Redis",
            "Store epic state (sprints, progress, phase)",
            "Store sprint state (agents, files, confidence scores)",
            "Store agent state (current task, file, line number)",
            "Implement checkpoint compression for large states"
          ],
          "deliverables": [
            "src/cfn-loop/state-checkpoint-manager.ts",
            "src/cfn-loop/checkpoint-serializer.ts",
            "tests/cfn-loop/state-checkpoint.test.ts"
          ],
          "acceptance_criteria": [
            "State checkpoints every 30s during execution",
            "Checkpoint size < 1MB per sprint",
            "Checkpoint write time < 100ms",
            "State includes all file edits and agent progress"
          ]
        },
        {
          "id": "phase-0.2",
          "name": "Crash Detection System",
          "tasks": [
            "Detect interrupted executions on CLI startup",
            "Scan Redis for running epics without heartbeats",
            "Compare last checkpoint timestamp vs current time",
            "Identify sprints in progress vs completed",
            "Calculate recovery estimate (time and work lost)"
          ],
          "deliverables": [
            "src/cfn-loop/crash-detector.ts",
            "src/cli/commands/recovery-status.ts",
            "tests/cfn-loop/crash-detection.test.ts"
          ],
          "acceptance_criteria": [
            "Detects interrupted epics within 5 seconds of CLI start",
            "Shows accurate sprint progress percentages",
            "Calculates estimated recovery time",
            "Differentiates between crash and clean shutdown"
          ]
        },
        {
          "id": "phase-0.3",
          "name": "State Recovery Engine",
          "tasks": [
            "Implement recovery prompt with options (resume/restart/inspect)",
            "Load checkpoint state from Redis",
            "Resume agents from last known state",
            "Skip completed sprints, resume in-progress sprints",
            "Handle partially written files (compare disk vs checkpoint)",
            "Re-establish coordination locks and dependencies"
          ],
          "deliverables": [
            "src/cfn-loop/recovery-engine.ts",
            "src/cli/commands/recovery-resume.ts",
            "tests/cfn-loop/recovery-engine.test.ts"
          ],
          "acceptance_criteria": [
            "Resumes execution within 2 minutes of crash",
            "Work loss < 5% for crashes at any point",
            "Completed sprints not re-executed",
            "In-progress files resume from last completed section",
            "Test locks and dependencies correctly restored"
          ]
        },
        {
          "id": "phase-0.4",
          "name": "Git Auto-Checkpoint",
          "tasks": [
            "Auto-commit work in progress every 5 minutes",
            "Create WIP branches per sprint (epic-123/sprint-2-wip)",
            "Tag commits with confidence scores",
            "Compare git checkpoint vs Redis checkpoint on recovery",
            "Use newer checkpoint (Redis usually more recent)"
          ],
          "deliverables": [
            "src/cfn-loop/git-checkpoint-manager.ts",
            "tests/cfn-loop/git-checkpoint.test.ts"
          ],
          "acceptance_criteria": [
            "WIP commits every 5 minutes during execution",
            "Commits include sprint progress metadata",
            "Recovery uses most recent checkpoint (git or Redis)",
            "WIP branches cleaned up after successful completion"
          ]
        },
        {
          "id": "phase-0.5",
          "name": "API Key Rotation & Rate Limit Handling",
          "tasks": [
            "Implement API key pool with multiple Z.ai keys",
            "Automatic rotation when rate limit detected (429 response)",
            "Track usage per key (requests/minute counter)",
            "Exponential backoff when all keys rate limited (1s, 2s, 4s, 8s)",
            "Prometheus metrics for key usage distribution",
            "Alert when all keys exhausted"
          ],
          "deliverables": [
            "src/providers/api-key-rotator.ts",
            "src/providers/rate-limit-detector.ts",
            "tests/providers/api-key-rotation.test.ts",
            "tests/providers/rate-limit-chaos.test.ts"
          ],
          "acceptance_criteria": [
            "Rotates to fallback keys on 429 response",
            "Tracks usage: <100 req/min per key",
            "Exponential backoff when all keys exhausted",
            "Zero request failures with 3 keys @ 300 total req/min",
            "Metrics show key usage distribution",
            "Alert triggers when all keys at 90% limit"
          ]
        },
        {
          "id": "phase-0.6",
          "name": "Recovery CLI Commands",
          "tasks": [
            "Implement /recovery:status command",
            "Implement /recovery:resume command",
            "Implement /recovery:inspect command",
            "Implement /recovery:abandon command",
            "Add recovery UI to dashboard"
          ],
          "deliverables": [
            "src/cli/commands/recovery.ts",
            "src/web/dashboard/recovery-ui.tsx",
            "tests/cli/recovery-commands.test.ts"
          ],
          "acceptance_criteria": [
            "CLI shows interrupted epics on startup",
            "User can resume, inspect, or abandon",
            "Dashboard shows recovery progress",
            "Dry-run mode shows what would be recovered"
          ]
        }
      ]
    },
    {
      "id": "sprint-1",
      "name": "Phase 1: Dependency Analysis Engine",
      "duration_estimate": "2-3 days",
      "dependencies": [],
      "phases": [
        {
          "id": "phase-1.1",
          "name": "Dependency Graph Builder",
          "tasks": [
            "Parse epic JSON configuration",
            "Extract sprint dependencies",
            "Build DAG (Directed Acyclic Graph)",
            "Detect circular dependencies",
            "Group independent sprints",
            "Calculate critical path"
          ],
          "deliverables": [
            "src/cfn-loop/dependency-analyzer.ts",
            "src/cfn-loop/dependency-graph.ts",
            "tests/cfn-loop/dependency-analyzer.test.ts"
          ],
          "acceptance_criteria": [
            "Detects circular dependencies with error",
            "Groups independent sprints correctly",
            "Calculates critical path for sequential execution",
            "Validates interface contracts between sprints"
          ]
        },
        {
          "id": "phase-1.2",
          "name": "Interface Contract System",
          "tasks": [
            "Define interface contract schema",
            "Implement contract validation",
            "Mock generation for dependent sprints",
            "Interface versioning support"
          ],
          "deliverables": [
            "src/cfn-loop/interface-contract.ts",
            "src/cfn-loop/mock-generator.ts",
            "tests/cfn-loop/interface-contract.test.ts"
          ],
          "acceptance_criteria": [
            "Contracts validate input/output types",
            "Mocks generated automatically from contracts",
            "Version mismatch detection",
            "Integration test support with mocks"
          ]
        }
      ]
    },
    {
      "id": "sprint-2",
      "name": "Phase 2: Test Coordination System",
      "duration_estimate": "3-4 days",
      "dependencies": [],
      "phases": [
        {
          "id": "phase-2.1",
          "name": "Test Lock Coordinator",
          "tasks": [
            "Implement global test execution lock",
            "Queue management for waiting coordinators",
            "Timeout and force release for stale locks",
            "Prometheus metrics for test slot contention"
          ],
          "deliverables": [
            "src/cfn-loop/test-lock-coordinator.ts",
            "tests/cfn-loop/test-lock-coordinator.test.ts",
            "tests/cfn-loop/test-lock-chaos.test.ts"
          ],
          "acceptance_criteria": [
            "Only one coordinator can run tests at a time",
            "Queue processes in FIFO order",
            "Stale locks force-released after 15 minutes",
            "Metrics show test slot utilization"
          ]
        },
        {
          "id": "phase-2.2",
          "name": "Test Result Aggregation",
          "tasks": [
            "Collect test results from parallel sprints",
            "Merge coverage reports",
            "Detect test conflicts (same test modified)",
            "Generate unified test report"
          ],
          "deliverables": [
            "src/cfn-loop/test-aggregator.ts",
            "tests/cfn-loop/test-aggregator.test.ts"
          ],
          "acceptance_criteria": [
            "Coverage merged correctly across sprints",
            "Test conflicts flagged for manual review",
            "Unified report shows per-sprint breakdown",
            "Failed tests linked to responsible sprint"
          ]
        }
      ]
    },
    {
      "id": "sprint-3",
      "name": "Phase 3: Memory Leak Prevention",
      "duration_estimate": "2-3 days",
      "dependencies": [],
      "phases": [
        {
          "id": "phase-3.1",
          "name": "Enhanced Lifecycle Cleanup",
          "tasks": [
            "Add Redis-sync cleanup to lifecycle manager",
            "Implement orphan detection (agents idle >2min)",
            "Force cleanup with lock acquisition",
            "Memory leak detection dashboard"
          ],
          "deliverables": [
            "src/agents/lifecycle-cleanup-enhanced.ts",
            "src/cli/cleanup-orphans.js",
            "tests/agents/orphan-detection.test.ts"
          ],
          "acceptance_criteria": [
            "Orphaned agents cleaned up within 2 minutes",
            "Redis keys removed on agent cleanup",
            "Dashboard shows memory usage trends",
            "No memory growth over 10 parallel sprints"
          ]
        },
        {
          "id": "phase-3.2",
          "name": "Agent Heartbeat System",
          "tasks": [
            "Agents send heartbeat every 30s",
            "Meta-coordinator monitors heartbeats",
            "Timeout handler detects dead agents",
            "Work transfer to replacement agents"
          ],
          "deliverables": [
            "src/agents/heartbeat-manager.ts",
            "tests/agents/heartbeat-timeout.test.ts"
          ],
          "acceptance_criteria": [
            "Dead agents detected within 2 minutes",
            "Work transferred without data loss",
            "Heartbeat events published to Redis",
            "Chaos test: 10% agent crash rate handled"
          ]
        }
      ]
    },
    {
      "id": "sprint-4",
      "name": "Phase 4: Parallel Coordination Engine",
      "duration_estimate": "4-5 days",
      "dependencies": ["sprint-1", "sprint-2", "sprint-3"],
      "phases": [
        {
          "id": "phase-4.1",
          "name": "Meta-Coordinator Implementation",
          "tasks": [
            "Spawn sprint coordinators for independent groups",
            "Monitor sprint progress via Redis pub/sub",
            "Aggregate Loop 4 Product Owner decisions",
            "Handle sprint failures and retries"
          ],
          "deliverables": [
            "src/cfn-loop/meta-coordinator.ts",
            "tests/cfn-loop/meta-coordinator.test.ts"
          ],
          "acceptance_criteria": [
            "Spawns N coordinators for N sprints",
            "Aggregates confidence scores correctly",
            "Retries failed sprints up to max limit",
            "Global decision: PROCEED/DEFER/ESCALATE"
          ]
        },
        {
          "id": "phase-4.2",
          "name": "Sprint Coordinator Enhancement",
          "tasks": [
            "Add dependency waiting with productive work",
            "Publish interface signals when ready",
            "Subscribe to dependency interface events",
            "Implement parallel Loop 2 validation"
          ],
          "deliverables": [
            "src/cfn-loop/sprint-coordinator-enhanced.ts",
            "tests/cfn-loop/dependency-waiting.test.ts"
          ],
          "acceptance_criteria": [
            "Waits for dependencies while working on independent files",
            "Publishes interface before full completion",
            "Loop 2 validation runs in parallel across sprints",
            "Integration validator checks cross-sprint contracts"
          ]
        },
        {
          "id": "phase-4.3",
          "name": "Conflict Resolution System",
          "tasks": [
            "Detect file edit conflicts via Redis locks",
            "Smart merge for non-overlapping changes",
            "Escalate complex conflicts to human",
            "Maintain conflict history for audit"
          ],
          "deliverables": [
            "src/cfn-loop/conflict-resolver.ts",
            "tests/cfn-loop/conflict-resolution.test.ts"
          ],
          "acceptance_criteria": [
            "Non-overlapping edits merged automatically",
            "Overlapping edits flagged for review",
            "Conflict resolution logged to Redis",
            "Integration tests pass after merge"
          ]
        }
      ]
    },
    {
      "id": "sprint-5",
      "name": "Phase 5: CLI Integration & Observability",
      "duration_estimate": "2-3 days",
      "dependencies": ["sprint-4"],
      "phases": [
        {
          "id": "phase-5.1",
          "name": "CLI Commands",
          "tasks": [
            "Add --parallel flag to /cfn-loop-epic",
            "Add --analyze-only for dependency graph preview",
            "Add --max-parallel-sprints configuration",
            "Add /cfn-loop-parallel-status for monitoring"
          ],
          "deliverables": [
            "src/cli/commands/cfn-loop-parallel.ts",
            "tests/cli/cfn-loop-parallel.test.ts"
          ],
          "acceptance_criteria": [
            "/cfn-loop-epic --parallel executes parallel sprints",
            "/cfn-loop-epic --analyze-only shows dependency graph",
            "CLI shows real-time progress per sprint",
            "Supports --max-parallel-sprints for resource limits"
          ]
        },
        {
          "id": "phase-5.2",
          "name": "Monitoring Dashboard",
          "tasks": [
            "Real-time sprint progress visualization",
            "Test slot queue status",
            "Memory usage per sprint",
            "Conflict resolution status"
          ],
          "deliverables": [
            "src/web/dashboard/parallel-cfn-loop.tsx",
            "src/web/api/routes/parallel-status.ts"
          ],
          "acceptance_criteria": [
            "Dashboard shows all active sprints",
            "Live updates via WebSocket",
            "Memory leak alerts triggered at 90% threshold",
            "Test queue depth visualized"
          ]
        }
      ]
    },
    {
      "id": "sprint-6",
      "name": "Phase 6: Testing & Validation",
      "duration_estimate": "3-4 days",
      "dependencies": ["sprint-5"],
      "phases": [
        {
          "id": "phase-6.1",
          "name": "Integration Tests",
          "tasks": [
            "End-to-end parallel epic execution",
            "Dependency waiting with productive work",
            "Test coordination with 5+ concurrent sprints",
            "Memory leak test (10 sequential epics)"
          ],
          "deliverables": [
            "tests/integration/parallel-cfn-loop.test.ts",
            "tests/integration/parallel-epic-e2e.test.ts"
          ],
          "acceptance_criteria": [
            "3 independent sprints complete in <40 minutes",
            "5 dependent sprints complete in <60 minutes",
            "No memory growth after 10 epic executions",
            "Zero test port conflicts"
          ]
        },
        {
          "id": "phase-6.2",
          "name": "Chaos Testing",
          "tasks": [
            "Random agent crashes (10% failure rate)",
            "Redis connection failures",
            "Test lock timeout scenarios",
            "Concurrent conflict resolution"
          ],
          "deliverables": [
            "tests/chaos/parallel-cfn-chaos.test.ts"
          ],
          "acceptance_criteria": [
            "Epic completes despite 10% agent failures",
            "Redis reconnection recovers state",
            "Test lock force-release works",
            "Conflicts resolved or escalated properly"
          ]
        }
      ]
    }
  ],
  "execution_strategy": {
    "mode": "parallel",
    "independent_groups": [
      {
        "name": "Foundation Group",
        "sprints": ["sprint-0", "sprint-1", "sprint-2", "sprint-3"],
        "parallelizable": true,
        "estimated_duration": "4 days (parallel) vs 10 days (sequential)"
      },
      {
        "name": "Integration Group",
        "sprints": ["sprint-4"],
        "parallelizable": false,
        "depends_on": ["Foundation Group"],
        "estimated_duration": "5 days"
      },
      {
        "name": "Release Group",
        "sprints": ["sprint-5", "sprint-6"],
        "parallelizable": true,
        "depends_on": ["Integration Group"],
        "estimated_duration": "4 days (parallel) vs 7 days (sequential)"
      }
    ],
    "total_duration": {
      "sequential": "22 days",
      "parallel": "13 days",
      "improvement": "41% faster"
    }
  },
  "resource_limits": {
    "max_parallel_sprints": 5,
    "max_agents_per_sprint": 15,
    "max_total_agents": 75,
    "redis_memory_limit": "2GB",
    "test_execution_timeout": "15 minutes",
    "sprint_timeout": "2 hours"
  },
  "quality_gates": {
    "loop_3_confidence": 0.75,
    "loop_2_consensus": 0.90,
    "integration_validation": 0.85,
    "test_coverage": 0.80,
    "memory_leak_threshold": "100MB growth per epic"
  },
  "monitoring": {
    "prometheus_metrics": [
      "parallel_sprint_duration_seconds",
      "test_slot_wait_time_seconds",
      "memory_usage_per_sprint_bytes",
      "conflict_resolution_count",
      "agent_orphan_cleanup_count",
      "dependency_wait_productive_time_seconds",
      "crash_recovery_time_seconds",
      "checkpoint_write_time_seconds",
      "work_loss_percentage_on_crash"
    ],
    "alerts": [
      {
        "name": "MemoryLeakDetected",
        "condition": "memory_growth > 100MB",
        "severity": "critical"
      },
      {
        "name": "TestSlotContention",
        "condition": "test_slot_wait_time > 5min",
        "severity": "warning"
      },
      {
        "name": "OrphanedAgents",
        "condition": "orphan_count > 5",
        "severity": "warning"
      },
      {
        "name": "ConflictEscalation",
        "condition": "unresolved_conflicts > 3",
        "severity": "critical"
      },
      {
        "name": "InterruptedExecutionDetected",
        "condition": "interrupted_epic_found = true",
        "severity": "warning"
      },
      {
        "name": "HighWorkLossOnRecovery",
        "condition": "work_loss_percentage > 10%",
        "severity": "warning"
      }
    ]
  },
  "rollback_plan": {
    "trigger": "Integration test failure rate > 30%",
    "actions": [
      "Disable parallel execution flag",
      "Fallback to sequential CFN Loop",
      "Log all parallel execution state to SQLite",
      "Notify team via alert-manager"
    ]
  },
  "success_criteria": {
    "performance": [
      "50% reduction in execution time for 3+ independent sprints",
      "Zero test port conflicts across 100 parallel executions",
      "Memory growth < 100MB per epic execution"
    ],
    "quality": [
      "â‰¥0.90 consensus maintained across all parallel streams",
      "100% of conflicts resolved or escalated",
      "Zero data loss from agent failures"
    ],
    "reliability": [
      "99% success rate with 10% random agent failures (chaos test)",
      "Recovery time < 2 minutes for dead agent detection",
      "Test lock force-release < 15 minutes for stale locks",
      "Work loss < 5% on VS Code crash at any execution point",
      "Resume from checkpoint within 2 minutes of crash"
    ]
  },
  "documentation": {
    "user_guide": "planning/parallelization/USER_GUIDE.md",
    "architecture": "planning/parallelization/ARCHITECTURE.md",
    "test_coordination": "planning/parallelization/TEST_COORDINATION.md",
    "memory_safety": "planning/parallelization/MEMORY_SAFETY.md",
    "troubleshooting": "planning/parallelization/TROUBLESHOOTING.md"
  },
  "metadata": {
    "created": "2025-10-10",
    "author": "CFN Loop Parallelization Team",
    "version": "1.0.0",
    "estimated_effort": "13 days (parallel execution)",
    "target_release": "v3.0.0"
  }
}
