name: Cross-Platform Compatibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - compatibility
          - performance
      node_version:
        description: 'Node.js version to test'
        required: true
        default: '20.x'
        type: choice
        options:
          - 18.x
          - 20.x
          - 22.x

env:
  NODE_OPTIONS: '--experimental-vm-modules'
  REDIS_URL: 'redis://localhost:6379'
  REDIS_HOST: 'localhost'
  REDIS_PORT: '6379'
  REDIS_DB: '1'

jobs:
  # Test matrix for different operating systems and Node.js versions
  compatibility-matrix:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        node_version:
          - 18.x
          - 20.x
          - 22.x
        include:
          # Additional test configurations
          - os: ubuntu-latest
            node_version: 18.x
            arch: x64
            redis_version: 7
          - os: ubuntu-latest
            node_version: 20.x
            arch: x64
            redis_version: 7
          - os: ubuntu-latest
            node_version: 22.x
            arch: x64
            redis_version: 7
          - os: windows-latest
            node_version: 20.x
            arch: x64
            redis_version: 7
          - os: macos-latest
            node_version: 20.x
            arch: arm64
            redis_version: 7
        exclude:
          # Exclude unstable combinations
          - os: windows-latest
            node_version: 22.x
          - os: macos-latest
            node_version: 22.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Redis (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          redis-cli ping

      - name: Setup Redis (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install redis
          brew services start redis
          redis-cli ping

      - name: Setup Redis (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install redis-64
          redis-server --service-start
          redis-cli ping

      - name: Verify Redis connection
        run: |
          node -e "
          const Redis = require('ioredis');
          const redis = new Redis({
            host: process.env.REDIS_HOST,
            port: parseInt(process.env.REDIS_PORT),
            maxRetriesPerRequest: 3,
            retryDelayOnFailover: 100,
            lazyConnect: true
          });

          redis.connect().then(() => {
            console.log('Redis connected successfully');
            return redis.ping();
          }).then(pong => {
            console.log('Redis PING response:', pong);
            redis.quit();
          }).catch(err => {
            console.error('Redis connection failed:', err.message);
            process.exit(1);
          });
          "

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run cross-platform compatibility tests
        run: node tests/cross-platform-compatibility.js --verbose

      - name: Run Node.js compatibility tests
        run: node tests/enhanced-nodejs-compatibility.js --verbose

      - name: Run platform-specific tests
        run: node tests/platform-specific-tests.js --verbose

      - name: Run Redis integration tests
        run: node tests/comprehensive-redis-integration.js --verbose

      - name: Run compatibility test runner
        run: node tests/compatibility-test-runner.js

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node_version }}
          path: |
            test-results/
            coverage/
            logs/
          retention-days: 7

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.node_version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.os }}
          name: ${{ matrix.os }}-coverage

  # Build and test package distribution
  package-distribution:
    name: Package Distribution Tests
    runs-on: ${{ matrix.os }}
    needs: compatibility-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node_version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Test package installation
        run: |
          # Create test directory
          mkdir test-installation
          cd test-installation

          # Create a test package.json
          cat > package.json << EOF
          {
            "name": "test-installation",
            "version": "1.0.0",
            "dependencies": {
              "claude-flow-novice": "file:../"
            }
          }
          EOF

          # Install the package
          npm install

          # Test basic functionality
          npx claude-flow-novice --help
          npx claude-flow-novice status

      - name: Test CLI commands
        run: |
          npx claude-flow-novice --help
          npx claude-flow-novice status
          npx claude-flow-novice swarm --help

      - name: Test NPM publish simulation
        run: |
          npm pack
          tar -tzf claude-flow-novice-*.tgz | head -20

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os }}
          path: |
            *.tgz
            test-installation/
          retention-days: 7

  # Performance testing
  performance-testing:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    needs: compatibility-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node_version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'

      - name: Setup Redis
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance

      - name: Run memory tests
        run: node tests/enhanced-nodejs-compatibility.js --features

      - name: Run Redis performance tests
        run: node tests/comprehensive-redis-integration.js --performance-only

      - name: Generate performance report
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');

          const report = {
            timestamp: new Date().toISOString(),
            platform: process.platform,
            arch: process.arch,
            nodeVersion: process.version,
            performance: {
              memory: process.memoryUsage(),
              uptime: process.uptime()
            }
          };

          const reportPath = path.join('test-results', 'performance-report.json');
          fs.mkdirSync(path.dirname(reportPath), { recursive: true });
          fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

          console.log('Performance report saved to:', reportPath);
          "

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-${{ matrix.os }}
          path: test-results/
          retention-days: 7

  # Security testing
  security-testing:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: compatibility-matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run security scanning
        run: npm run security:check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Documentation testing
  documentation-testing:
    name: Documentation Tests
    runs-on: ubuntu-latest
    needs: compatibility-matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test documentation links
        run: |
          find . -name "*.md" -not -path "./node_modules/*" | xargs grep -l "http" | head -5

      - name: Generate API documentation
        run: npm run docs:generate || echo "No docs:generate script found"

      - name: Validate package.json
        run: |
          node -e "
          const pkg = require('./package.json');
          console.log('✅ package.json is valid');
          console.log('Name:', pkg.name);
          console.log('Version:', pkg.version);
          console.log('Engines:', pkg.engines);
          console.log('Files:', pkg.files ? pkg.files.length : 0, 'files included');
          "

  # Final aggregation and reporting
  test-aggregation:
    name: Test Results Aggregation
    runs-on: ubuntu-latest
    needs: [compatibility-matrix, package-distribution, performance-testing, security-testing, documentation-testing]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Generate comprehensive report
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');

          const report = {
            timestamp: new Date().toISOString(),
            workflow: '\${{ github.workflow }}',
            runId: '\${{ github.run_id }}',
            commit: '\${{ github.sha }}',
            branch: '\${{ github.ref_name }}',
            summary: {
              totalJobs: 0,
              successfulJobs: 0,
              failedJobs: 0
            },
            jobs: []
          };

          // Process all artifacts
          const artifactsDir = 'all-artifacts';
          if (fs.existsSync(artifactsDir)) {
            const artifacts = fs.readdirSync(artifactsDir);

            artifacts.forEach(artifact => {
              report.summary.totalJobs++;

              const artifactPath = path.join(artifactsDir, artifact);
              if (fs.statSync(artifactPath).isDirectory()) {
                const testResultsPath = path.join(artifactPath, 'test-results');
                if (fs.existsSync(testResultsPath)) {
                  const testResults = fs.readdirSync(testResultsPath);
                  testResults.forEach(resultFile => {
                    if (resultFile.endsWith('.json')) {
                      const resultPath = path.join(testResultsPath, resultFile);
                      try {
                        const result = JSON.parse(fs.readFileSync(resultPath, 'utf8'));
                        report.jobs.push({
                          artifact,
                          result: resultFile,
                          data: result
                        });

                        if (result.summary && result.summary.successRate === 100) {
                          report.summary.successfulJobs++;
                        } else {
                          report.summary.failedJobs++;
                        }
                      } catch (err) {
                        console.error('Error reading result file:', resultPath, err.message);
                      }
                    }
                  });
                }
              }
            });
          }

          // Save comprehensive report
          const reportPath = path.join('test-results', 'comprehensive-report.json');
          fs.mkdirSync(path.dirname(reportPath), { recursive: true });
          fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

          console.log('=== COMPREHENSIVE TEST REPORT ===');
          console.log('Total Jobs:', report.summary.totalJobs);
          console.log('Successful Jobs:', report.summary.successfulJobs);
          console.log('Failed Jobs:', report.summary.failedJobs);
          console.log('Success Rate:', report.summary.totalJobs > 0 ?
            Math.round((report.summary.successfulJobs / report.summary.totalJobs) * 100) : 0, '%');
          console.log('Report saved to:', reportPath);
          "

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-report
          path: test-results/
          retention-days: 30

      - name: Create status badge
        run: |
          node -e "
          const fs = require('fs');

          const reportPath = 'test-results/comprehensive-report.json';
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const successRate = report.summary.totalJobs > 0 ?
              Math.round((report.summary.successfulJobs / report.summary.totalJobs) * 100) : 0;

            const badgeColor = successRate >= 95 ? 'brightgreen' :
                            successRate >= 80 ? 'yellow' : 'red';

            const badgeData = {
              schemaVersion: 1,
              label: 'Cross-Platform Compatibility',
              message: successRate + '%',
              color: badgeColor
            };

            fs.writeFileSync('compatibility-badge.json', JSON.stringify(badgeData, null, 2));
            console.log('Compatibility badge created:', badgeData);
          }
          "

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'test-results/comprehensive-report.json';

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const successRate = report.summary.totalJobs > 0 ?
                Math.round((report.summary.successfulJobs / report.summary.totalJobs) * 100) : 0;

              const comment = \`## 🧪 Cross-Platform Compatibility Test Results

              **Overall Success Rate:** \${successRate}% (\${report.summary.successfulJobs}/\${report.summary.totalJobs})

              **Test Results by Job:**
              \${report.jobs.map(job => \`
              - \${job.artifact}: \${job.data.summary?.successRate || 'N/A'}%
              \`).join('')}

              \${successRate >= 95 ? '✅ **All tests passed!** Ready for merge.' :
                successRate >= 80 ? '⚠️ **Some tests failed.** Please review the results.' :
                '❌ **Multiple test failures.** Please fix the issues before merging.'}

              [View detailed test results](https://github.com/\${context.repo.owner}/\${context.repo.repo}/actions/runs/\${context.runId})
              \`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Release preparation (only on main branch)
  release-preparation:
    name: Release Preparation
    runs-on: ubuntu-latest
    needs: test-aggregation
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run full test suite
        run: npm run test:ci

      - name: Check if version bump is needed
        id: version-check
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^[bB]ump.*|[vV]ersion.*|[rR]elease.* ]]; then
            echo "should_bump=true" >> $GITHUB_OUTPUT
          else
            echo "should_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump version and create tag
        if: steps.version-check.outputs.should_bump == 'true'
        run: |
          npm version patch -m "chore: Bump version to %s"
          git push origin main --follow-tags
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        if: steps.version-check.outputs.should_bump == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.should_bump == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.version }}
          release_name: Release v${{ steps.version-check.outputs.version }}
          body: |
            ## 🚀 Release v${{ steps.version-check.outputs.version }}

            ### ✨ Features
            - Cross-platform compatibility improvements
            - Enhanced Redis integration
            - Performance optimizations

            ### 🐛 Bug Fixes
            - Platform-specific bug fixes
            - Memory management improvements

            ### 🔧 Technical Improvements
            - Enhanced test coverage
            - Updated dependencies
            - Improved documentation

            ### 📦 Installation
            \`\`\`bash
            npm install claude-flow-novice@${{ steps.version-check.outputs.version }}
            \`\`\`

            ### 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/claude-flow-novice)
            - [GitHub Repository](https://github.com/${{ github.repository }})
            - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          draft: false
          prerelease: false