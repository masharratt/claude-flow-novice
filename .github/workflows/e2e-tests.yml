name: End-to-End Testing with Playwright

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - performance
          - visual
          - multi-agent
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      environment:
        description: 'Environment to test against'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  setup:
    name: Test Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
      should-run-tests: ${{ steps.changes.outputs.should-run }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            tests:
              - 'tests/**'
              - 'src/**'
              - 'package.json'
              - 'playwright.config.ts'
              - '.github/workflows/e2e-tests.yml'

      - name: Generate test matrix
        id: matrix
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
            echo "matrix={\"include\":[{\"project\":\"chromium\",\"suite\":\"smoke\"}]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.browser }}" != "all" ]; then
            echo "matrix={\"include\":[{\"project\":\"${{ github.event.inputs.browser }}\",\"suite\":\"${{ github.event.inputs.test_suite || 'all' }}\"}]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[{\"project\":\"chromium\",\"suite\":\"all\"},{\"project\":\"firefox\",\"suite\":\"all\"},{\"project\":\"webkit\",\"suite\":\"all\"}]}" >> $GITHUB_OUTPUT
          fi

  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install system dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install-deps

  e2e-tests:
    name: E2E Tests (${{ matrix.project }} - ${{ matrix.suite }})
    runs-on: ubuntu-latest
    needs: [setup, install]
    if: needs.setup.outputs.should-run-tests == 'true' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}

    env:
      TEST_SUITE: ${{ matrix.suite }}
      BROWSER: ${{ matrix.project }}
      BASE_URL: ${{ github.event.inputs.environment == 'production' && 'https://claude-flow.ruv.io' || 'http://localhost:3000' }}
      API_URL: ${{ github.event.inputs.environment == 'production' && 'https://api.claude-flow.ruv.io' || 'http://localhost:8000' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Setup test database
        run: |
          npm run db:setup:test
          npm run db:seed:test
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Start application (if local testing)
        if: github.event.inputs.environment != 'production'
        run: |
          npm run start:test &
          sleep 30
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

      - name: Run Playwright tests
        run: |
          if [ "${{ matrix.suite }}" = "smoke" ]; then
            npx playwright test --project=${{ matrix.project }} tests/e2e/smoke/
          elif [ "${{ matrix.suite }}" = "regression" ]; then
            npx playwright test --project=${{ matrix.project }} tests/e2e/regression/
          elif [ "${{ matrix.suite }}" = "performance" ]; then
            npx playwright test --project=performance
          elif [ "${{ matrix.suite }}" = "visual" ]; then
            npx playwright test --project=visual
          elif [ "${{ matrix.suite }}" = "multi-agent" ]; then
            npx playwright test --project=multi-agent
          else
            npx playwright test --project=${{ matrix.project }}
          fi
        env:
          CI: true
          PWDEBUG: ${{ runner.debug && '1' || '0' }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}-${{ matrix.suite }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Upload failure screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: failure-screenshots-${{ matrix.project }}-${{ matrix.suite }}
          path: test-results/failures/
          retention-days: 7

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [setup, install]
    if: (needs.setup.outputs.should-run-tests == 'true' || github.event_name == 'workflow_dispatch') && github.event.inputs.test_suite != 'smoke'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          npm run db:setup:test
          npm run start:test &
          sleep 30

      - name: Run visual regression tests
        run: npx playwright test --project=visual
        env:
          UPDATE_BASELINES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/visual/
            tests/visual/screenshots/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, install]
    if: (needs.setup.outputs.should-run-tests == 'true' || github.event_name == 'workflow_dispatch') && (github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == 'all')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup performance testing environment
        run: |
          npm run db:setup:test
          npm run start:test &
          sleep 30

      - name: Run performance tests
        run: npx playwright test --project=performance
        env:
          PERFORMANCE_BUDGET: 'strict'

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/performance/
            test-results/performance-baselines.json
          retention-days: 30

  multi-agent-tests:
    name: Multi-Agent Coordination Tests
    runs-on: ubuntu-latest
    needs: [setup, install]
    if: (needs.setup.outputs.should-run-tests == 'true' || github.event_name == 'workflow_dispatch') && (github.event.inputs.test_suite == 'multi-agent' || github.event.inputs.test_suite == 'all')
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup multi-agent test environment
        run: |
          npm run db:setup:test
          npm run claude-flow:init:test
          npm run start:test &
          sleep 45

      - name: Run multi-agent coordination tests
        run: npx playwright test --project=multi-agent
        env:
          MULTI_AGENT_TIMEOUT: '120000'
          COORDINATION_RETRIES: '3'

      - name: Upload multi-agent test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: multi-agent-test-results
          path: |
            test-results/multi-agent/
            test-results/swarm-logs/
          retention-days: 7

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-regression, performance-tests, multi-agent-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v3

      - name: Generate comprehensive test report
        run: |
          node scripts/generate-test-report.js
          ls -la test-results/

      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: |
            test-results/comprehensive-report.html
            test-results/test-summary.json
          retention-days: 30