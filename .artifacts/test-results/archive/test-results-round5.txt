
> claude-flow-novice@1.5.22 test
> NODE_OPTIONS='--experimental-vm-modules' jest --config=config/jest/jest.config.js --bail --maxWorkers=1 --forceExit

ts-jest[config] (WARN) 
    The "ts-jest" config option "isolatedModules" is deprecated and will be removed in v30.0.0. Please use "isolatedModules: true", see https://www.typescriptlang.org/tsconfig/#isolatedModules
  
(node:81963) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
  console.error
    {"timestamp":"2025-10-03T16:42:30.176Z","level":"ERROR","message":"Operation timed out","context":{"component":"CFNCircuitBreaker:test-breaker"},"error":{"name":"test-breaker","timeoutMs":500,"timeoutCount":1}}

      234 |         break;
      235 |       case LogLevel.ERROR:
    > 236 |         console.error(message);
          |                 ^
      237 |         break;
      238 |     }
      239 |   }

      at Logger.writeToConsole (src/core/logger.ts:236:17)
      at Logger.log (src/core/logger.ts:183:12)
      at Logger.error (src/core/logger.ts:140:10)
      at CFNCircuitBreaker.execute (src/cfn-loop/circuit-breaker.ts:123:21)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:906:9)

  console.error
    {"timestamp":"2025-10-03T16:42:31.435Z","level":"ERROR","message":"Operation timed out","context":{"component":"CFNCircuitBreaker:custom-timeout"},"error":{"name":"custom-timeout","timeoutMs":100,"timeoutCount":1}}

      234 |         break;
      235 |       case LogLevel.ERROR:
    > 236 |         console.error(message);
          |                 ^
      237 |         break;
      238 |     }
      239 |   }

      at Logger.writeToConsole (src/core/logger.ts:236:17)
      at Logger.log (src/core/logger.ts:183:12)
      at Logger.error (src/core/logger.ts:140:10)
      at CFNCircuitBreaker.execute (src/cfn-loop/circuit-breaker.ts:123:21)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:1030:7)

  console.error
    {"timestamp":"2025-10-03T16:42:31.538Z","level":"ERROR","message":"Operation timed out","context":{"component":"CFNCircuitBreaker:timeout-metadata"},"error":{"name":"timeout-metadata","timeoutMs":100,"timeoutCount":1}}

      234 |         break;
      235 |       case LogLevel.ERROR:
    > 236 |         console.error(message);
          |                 ^
      237 |         break;
      238 |     }
      239 |   }

      at Logger.writeToConsole (src/core/logger.ts:236:17)
      at Logger.log (src/core/logger.ts:183:12)
      at Logger.error (src/core/logger.ts:140:10)
      at CFNCircuitBreaker.execute (src/cfn-loop/circuit-breaker.ts:123:21)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:1041:9)

FAIL tests/security/cfn-loop-security.test.js (8.923 s)
  CVE-2025-001: Iteration Limit Validation
    IterationTracker - Loop 2 Limits
      ✓ should reject negative maxLoop2 values (33 ms)
      ✓ should reject zero maxLoop2 values (1 ms)
      ✓ should reject maxLoop2 > 100
      ✓ should reject NaN maxLoop2 values
      ✓ should reject Infinity maxLoop2 values
      ✓ should accept valid maxLoop2 values (1-100)
      ✕ should reject float maxLoop2 values (8 ms)
    IterationTracker - Loop 3 Limits
      ✓ should reject negative maxLoop3 values
      ✓ should reject zero maxLoop3 values
      ✓ should reject maxLoop3 > 100
      ✓ should reject NaN maxLoop3 values
      ✓ should reject Infinity maxLoop3 values (1 ms)
      ✓ should accept valid maxLoop3 values (1-100)
    CFNLoopOrchestrator - Configuration Validation
      ✓ should reject invalid maxLoop2Iterations (7 ms)
      ✓ should reject invalid maxLoop3Iterations
      ✕ should use default values when not specified (1 ms)
  CVE-2025-002: Prompt Injection Prevention
    Instruction Injection Attacks
      ✓ should sanitize "IGNORE PREVIOUS INSTRUCTIONS" (1 ms)
      ✓ should sanitize case-insensitive instruction injection
      ✓ should sanitize "DISREGARD ALL PREVIOUS"
      ✓ should sanitize "FORGET EVERYTHING"
      ✓ should sanitize "NEW INSTRUCTIONS"
    Role Manipulation Attacks
      ✓ should sanitize "SYSTEM:" prefix
      ✓ should sanitize "ASSISTANT:" prefix
      ✓ should sanitize "USER:" prefix
      ✓ should sanitize "ACT AS" role change
      ✓ should sanitize "PRETEND TO BE"
      ✓ should sanitize "YOU ARE NOW"
    Markdown Injection Attacks
      ✓ should remove code blocks (1 ms)
      ✓ should remove nested markdown links
      ✓ should handle multiple code blocks
    Control Character Removal
      ✓ should remove null bytes
      ✓ should remove bell character
      ✓ should remove escape sequences
      ✓ should preserve newlines and tabs (1 ms)
    Length-Based DoS Prevention
      ✓ should truncate feedback > 5000 characters (1 ms)
      ✓ should preserve feedback <= 5000 characters
      ✓ should handle empty strings
      ✓ should handle whitespace-only strings
    Feedback Injection Integration
      ✓ should sanitize all feedback fields during capture (1 ms)
      ✓ should sanitize feedback before agent injection
    Type Coercion Safety
      ✓ should handle non-string inputs gracefully
      ✓ should convert objects to strings before sanitization
  CVE-2025-003: Memory Leak Prevention
    LRU Eviction - Feedback History
      ✓ should limit feedback history to 100 entries per phase (1 ms)
      ✓ should keep most recent entries after eviction (1 ms)
      ✓ should handle multiple phases independently (1 ms)
    Issue Registry Size Limits
      ✓ should limit issue registry to 100 entries per phase (4 ms)
      ✕ should evict oldest issues when limit reached (2 ms)
    Periodic Cleanup Interval
      ✓ should start cleanup interval on initialization
      ✓ should clear cleanup interval on shutdown
      ✓ should prevent duplicate intervals
    Manual Cleanup
      ✓ should cleanup oversized feedback history
      ✓ should cleanup oversized issue registries
    Memory Bounded Under Load
      ✓ should maintain bounded memory with sustained load (7 ms)
    clearPhaseHistory
      ✓ should clear both history and registry for a phase (1 ms)
    shutdown
      ✓ should clear all memory structures
  Resource Exhaustion Protection
    Circuit Breaker - Failure Protection
      ✕ should open circuit after failure threshold (1 ms)
      ✓ should reject requests when circuit is open (4 ms)
      ✓ should track timeout count separately (556 ms)
      ✓ should transition to half-open after cooldown (1100 ms)
    Circuit Breaker Manager
      ✓ should create separate breakers per operation (1 ms)
      ✕ should isolate failures between breakers
      ✓ should track aggregate statistics (1 ms)
      ✕ should reset all breakers
    Timeout Enforcement
      ✓ should enforce default 30-minute timeout
      ✓ should enforce custom timeout per operation (104 ms)
      ✓ should include timeout metadata in error (103 ms)
    Max Agent Limits
      ✓ should validate maxAgents in orchestrator config
  Security Integration Tests
    ✓ should handle all CVE scenarios in single workflow (2 ms)
    ✓ should maintain security under concurrent operations

  ● CVE-2025-001: Iteration Limit Validation › IterationTracker - Loop 2 Limits › should reject float maxLoop2 values

    expect(received).toThrow(expected)

    Expected pattern: /must be an integer/i
    Received message: "Invalid loop2Max: 5.5. Must be integer between 1 and 100"

          59 |     // Prevent DoS attacks via excessive iteration limits
          60 |     if (!Number.isInteger(loop2Max) || loop2Max < 1 || loop2Max > 100) {
        > 61 |       throw new Error(
             |             ^
          62 |         `Invalid loop2Max: ${loop2Max}. Must be integer between 1 and 100`
          63 |       );
          64 |     }

      at new IterationTracker (src/coordination/iteration-tracker.js:61:13)
      at tests/security/cfn-loop-security.test.js:113:9
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:119:10)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:119:10)

  ● CVE-2025-001: Iteration Limit Validation › CFNLoopOrchestrator - Configuration Validation › should use default values when not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 10

      218 |
      219 |       const config = orchestrator['config'];
    > 220 |       expect(config.maxLoop2Iterations).toBe(5);
          |                                         ^
      221 |       expect(config.maxLoop3Iterations).toBe(10);
      222 |     });
      223 |   });

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:220:41)

  ● CVE-2025-003: Memory Leak Prevention › Issue Registry Size Limits › should evict oldest issues when limit reached

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      661 |
      662 |       expect(registry.has(firstIssueKey)).toBe(false);
    > 663 |       expect(registry.has(lastIssueKey)).toBe(true);
          |                                          ^
      664 |     });
      665 |   });
      666 |

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:663:42)

  ● Resource Exhaustion Protection › Circuit Breaker - Failure Protection › should open circuit after failure threshold

    expect(received).toBe(expected) // Object.is equality

    Expected: "OPEN"
    Received: "open"

      872 |
      873 |       const state = breaker.getState();
    > 874 |       expect(state.state).toBe('OPEN');
          |                           ^
      875 |       expect(state.failureCount).toBe(3);
      876 |     });
      877 |

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:874:27)

  ● Resource Exhaustion Protection › Circuit Breaker Manager › should isolate failures between breakers

    expect(received).toBe(expected) // Object.is equality

    Expected: "OPEN"
    Received: "open"

      963 |       // op1 should be open
      964 |       const state1 = manager.getBreakerState('op1');
    > 965 |       expect(state1.state).toBe('OPEN');
          |                            ^
      966 |
      967 |       // op2 should still be closed
      968 |       await manager.execute('op2', async () => 'success');

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:965:28)

  ● Resource Exhaustion Protection › Circuit Breaker Manager › should reset all breakers

    expect(received).toBe(expected) // Object.is equality

    Expected: "CLOSED"
    Received: "closed"

      1001 |       const state2 = manager.getBreakerState('op2');
      1002 |
    > 1003 |       expect(state1.state).toBe('CLOSED');
           |                            ^
      1004 |       expect(state2.state).toBe('CLOSED');
      1005 |       expect(state1.failureCount).toBe(0);
      1006 |       expect(state2.failureCount).toBe(0);

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:1003:28)

Summary of all failing tests
FAIL tests/security/cfn-loop-security.test.js (8.923 s)
  ● CVE-2025-001: Iteration Limit Validation › IterationTracker - Loop 2 Limits › should reject float maxLoop2 values

    expect(received).toThrow(expected)

    Expected pattern: /must be an integer/i
    Received message: "Invalid loop2Max: 5.5. Must be integer between 1 and 100"

          59 |     // Prevent DoS attacks via excessive iteration limits
          60 |     if (!Number.isInteger(loop2Max) || loop2Max < 1 || loop2Max > 100) {
        > 61 |       throw new Error(
             |             ^
          62 |         `Invalid loop2Max: ${loop2Max}. Must be integer between 1 and 100`
          63 |       );
          64 |     }

      at new IterationTracker (src/coordination/iteration-tracker.js:61:13)
      at tests/security/cfn-loop-security.test.js:113:9
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:119:10)
      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:119:10)

  ● CVE-2025-001: Iteration Limit Validation › CFNLoopOrchestrator - Configuration Validation › should use default values when not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 10

      218 |
      219 |       const config = orchestrator['config'];
    > 220 |       expect(config.maxLoop2Iterations).toBe(5);
          |                                         ^
      221 |       expect(config.maxLoop3Iterations).toBe(10);
      222 |     });
      223 |   });

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:220:41)

  ● CVE-2025-003: Memory Leak Prevention › Issue Registry Size Limits › should evict oldest issues when limit reached

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      661 |
      662 |       expect(registry.has(firstIssueKey)).toBe(false);
    > 663 |       expect(registry.has(lastIssueKey)).toBe(true);
          |                                          ^
      664 |     });
      665 |   });
      666 |

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:663:42)

  ● Resource Exhaustion Protection › Circuit Breaker - Failure Protection › should open circuit after failure threshold

    expect(received).toBe(expected) // Object.is equality

    Expected: "OPEN"
    Received: "open"

      872 |
      873 |       const state = breaker.getState();
    > 874 |       expect(state.state).toBe('OPEN');
          |                           ^
      875 |       expect(state.failureCount).toBe(3);
      876 |     });
      877 |

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:874:27)

  ● Resource Exhaustion Protection › Circuit Breaker Manager › should isolate failures between breakers

    expect(received).toBe(expected) // Object.is equality

    Expected: "OPEN"
    Received: "open"

      963 |       // op1 should be open
      964 |       const state1 = manager.getBreakerState('op1');
    > 965 |       expect(state1.state).toBe('OPEN');
          |                            ^
      966 |
      967 |       // op2 should still be closed
      968 |       await manager.execute('op2', async () => 'success');

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:965:28)

  ● Resource Exhaustion Protection › Circuit Breaker Manager › should reset all breakers

    expect(received).toBe(expected) // Object.is equality

    Expected: "CLOSED"
    Received: "closed"

      1001 |       const state2 = manager.getBreakerState('op2');
      1002 |
    > 1003 |       expect(state1.state).toBe('CLOSED');
           |                            ^
      1004 |       expect(state2.state).toBe('CLOSED');
      1005 |       expect(state1.failureCount).toBe(0);
      1006 |       expect(state2.failureCount).toBe(0);

      at Object.<anonymous> (tests/security/cfn-loop-security.test.js:1003:28)


Test Suites: 1 failed, 1 of 262 total
Tests:       6 failed, 63 passed, 69 total
Snapshots:   0 total
Time:        10.174 s, estimated 487 s
Ran all test suites.
