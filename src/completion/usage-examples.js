/**
 * Usage Examples and Help Text for CLI Wizard
 * Phase 2 Implementation - User Experience Enhancement
 *
 * Provides comprehensive examples and guidance for 95% user success rate
 */

export const USAGE_EXAMPLES = {
  setup: {
    basic: 'claude-flow-novice validate setup',
    reset: 'claude-flow-novice validate setup --reset',
    verbose: 'claude-flow-novice validate setup --verbose',
  },

  showConfig: {
    basic: 'claude-flow-novice validate show-config',
    json: 'claude-flow-novice validate show-config --json',
    verbose: 'claude-flow-novice validate show-config --verbose',
  },

  test: {
    basic: 'claude-flow-novice validate test',
    fix: 'claude-flow-novice validate test --fix',
    verbose: 'claude-flow-novice validate test --verbose',
  },
};

export const HELP_TEXT = {
  overview: `
üîß Completion Validation Framework Setup

The validation framework ensures high-quality completions through:
‚Ä¢ Framework-specific truth thresholds (TDD: 95%, BDD: 90%, SPARC: 92%)
‚Ä¢ Automated quality gates for test coverage and code quality
‚Ä¢ Byzantine fault-tolerant consensus validation
‚Ä¢ Real-time completion interception and validation

Target completion time: Under 5 minutes for 95% of users
`,

  quickStart: `
üöÄ QUICK START GUIDE

1. Run the setup wizard:
   claude-flow-novice validate setup

2. The wizard will:
   ‚Ä¢ Auto-detect your project framework (90%+ accuracy)
   ‚Ä¢ Configure appropriate quality gates
   ‚Ä¢ Set up validation thresholds
   ‚Ä¢ Test the configuration

3. Verify your setup:
   claude-flow-novice validate test

4. View your configuration anytime:
   claude-flow-novice validate show-config
`,

  frameworks: {
    javascript: `
üì¶ JAVASCRIPT PROJECT DETECTED

Default Configuration:
‚Ä¢ Truth Score Threshold: 85%
‚Ä¢ Test Coverage Threshold: 90%
‚Ä¢ Testing Framework: Jest (if detected)
‚Ä¢ File Patterns: **/*.test.js, **/*.spec.js

The wizard detected JavaScript based on:
‚Ä¢ package.json presence
‚Ä¢ .js file extensions
‚Ä¢ Node.js dependencies
‚Ä¢ Testing framework indicators
`,

    typescript: `
üìò TYPESCRIPT PROJECT DETECTED

Default Configuration:
‚Ä¢ Truth Score Threshold: 90%
‚Ä¢ Test Coverage Threshold: 95%
‚Ä¢ Testing Framework: Jest with TypeScript
‚Ä¢ File Patterns: **/*.test.ts, **/*.spec.ts

The wizard detected TypeScript based on:
‚Ä¢ tsconfig.json presence
‚Ä¢ .ts/.tsx file extensions
‚Ä¢ TypeScript dependencies in package.json
‚Ä¢ Type definition files
`,

    python: `
üêç PYTHON PROJECT DETECTED

Default Configuration:
‚Ä¢ Truth Score Threshold: 88%
‚Ä¢ Test Coverage Threshold: 92%
‚Ä¢ Testing Framework: pytest (if detected)
‚Ä¢ File Patterns: **/test_*.py, **/*_test.py

The wizard detected Python based on:
‚Ä¢ requirements.txt or setup.py presence
‚Ä¢ .py file extensions
‚Ä¢ Python-specific files (Pipfile, pyproject.toml)
‚Ä¢ Python package structure
`,

    tdd: `
üîÑ TEST-DRIVEN DEVELOPMENT (TDD)

Strict Configuration:
‚Ä¢ Truth Score Threshold: 95%
‚Ä¢ Test Coverage Threshold: 98%
‚Ä¢ Test-First Development Required
‚Ä¢ Red-Green-Refactor Cycle Validation

TDD mode ensures:
‚Ä¢ Tests written before implementation
‚Ä¢ Complete test coverage
‚Ä¢ Refactoring safety
‚Ä¢ Clean, maintainable code
`,

    bdd: `
üìã BEHAVIOR-DRIVEN DEVELOPMENT (BDD)

Scenario-Based Configuration:
‚Ä¢ Truth Score Threshold: 90%
‚Ä¢ Scenario Coverage Threshold: 95%
‚Ä¢ Gherkin Syntax Compliance
‚Ä¢ Feature-Scenario-Step Structure

BDD mode validates:
‚Ä¢ Clear behavior specifications
‚Ä¢ Stakeholder-readable scenarios
‚Ä¢ Complete feature coverage
‚Ä¢ Acceptance criteria fulfillment
`,

    sparc: `
üèóÔ∏è SPARC METHODOLOGY

Structured Configuration:
‚Ä¢ Truth Score Threshold: 92%
‚Ä¢ Phase Completion: 100%
‚Ä¢ Architecture Documentation Required
‚Ä¢ All Phases Must Complete

SPARC phases:
‚Ä¢ Specification: Clear requirements
‚Ä¢ Pseudocode: Algorithm design
‚Ä¢ Architecture: System structure
‚Ä¢ Refinement: TDD implementation
‚Ä¢ Completion: Integration & deployment
`,
  },

  troubleshooting: `
üîß TROUBLESHOOTING GUIDE

COMMON ISSUES:

1. Framework Detection Failed
   Symptoms: "Unknown framework" or low confidence
   Solutions:
   ‚Ä¢ Ensure project files are in current directory
   ‚Ä¢ Check file permissions
   ‚Ä¢ Add missing configuration files (package.json, requirements.txt)
   ‚Ä¢ Use manual framework selection

2. Configuration Test Failed
   Symptoms: Validation errors during test
   Solutions:
   ‚Ä¢ Verify project structure is complete
   ‚Ä¢ Check network connectivity for Byzantine consensus
   ‚Ä¢ Ensure sufficient disk space for configuration files
   ‚Ä¢ Run with --verbose for detailed error information

3. Quality Gates Too Strict
   Symptoms: Frequent validation failures
   Solutions:
   ‚Ä¢ Review and adjust thresholds in setup wizard
   ‚Ä¢ Consider project maturity and team experience
   ‚Ä¢ Enable partial validation for non-critical completions
   ‚Ä¢ Consult team on appropriate quality standards

4. Setup Taking Too Long
   Symptoms: Wizard not completing within 5 minutes
   Solutions:
   ‚Ä¢ Use framework defaults (don't customize unless needed)
   ‚Ä¢ Ensure stable internet connection
   ‚Ä¢ Close other resource-intensive applications
   ‚Ä¢ Consider simplified configuration

NEED MORE HELP?
‚Ä¢ Run: claude-flow-novice validate setup --verbose
‚Ä¢ Check logs in .claude-flow/logs/
‚Ä¢ Visit documentation: https://github.com/ruvnet/claude-flow
`,

  bestPractices: `
‚ú® BEST PRACTICES

SETUP RECOMMENDATIONS:
‚Ä¢ Run setup wizard in project root directory
‚Ä¢ Use auto-detected framework when confidence > 70%
‚Ä¢ Start with default quality gates, adjust based on experience
‚Ä¢ Enable Byzantine consensus for production projects
‚Ä¢ Test configuration before first use

QUALITY GATE GUIDELINES:
‚Ä¢ Truth Score: Start at 85%, increase gradually to 90-95%
‚Ä¢ Test Coverage: 90% for most projects, 95%+ for critical systems
‚Ä¢ Code Quality: 85% baseline, adjust for team coding standards
‚Ä¢ Documentation: 80% for internal projects, 90%+ for public APIs

FRAMEWORK-SPECIFIC TIPS:
‚Ä¢ JavaScript: Use Jest for consistent testing experience
‚Ä¢ TypeScript: Enable strict mode in tsconfig.json
‚Ä¢ Python: Use pytest with coverage reporting
‚Ä¢ TDD: Write tests first, maintain high coverage
‚Ä¢ BDD: Focus on clear, stakeholder-readable scenarios
‚Ä¢ SPARC: Complete each phase before proceeding

TEAM ADOPTION:
‚Ä¢ Start with one project as pilot
‚Ä¢ Train team on validation framework concepts
‚Ä¢ Establish team-wide quality standards
‚Ä¢ Regular review and adjustment of thresholds
‚Ä¢ Share success stories and lessons learned
`,

  examples: `
üìö USAGE EXAMPLES

FIRST-TIME SETUP:
$ claude-flow-novice validate setup
üîß Starting Completion Validation Setup...
üìÅ Analyzing your project structure...
‚ú® Detected: TYPESCRIPT (92% confidence)
‚úÖ Setup completed successfully!

CHECKING CONFIGURATION:
$ claude-flow-novice validate show-config
üìã Current Completion Validation Configuration

Framework Settings:
  Framework: typescript

Quality Gates:
  Truth Score: 90%
  Test Coverage: 95%
  Code Quality: 85%
  Documentation: 80%

TESTING SETUP:
$ claude-flow-novice validate test
üß™ Testing Completion Validation Configuration
‚úÖ Test Results:
  Framework Detection: typescript (92% confidence)
  Quality Gates: 4 thresholds configured
  Byzantine Consensus: Functional

CUSTOMIZED SETUP (Advanced):
$ claude-flow-novice validate setup --verbose
# Follow wizard prompts to customize:
# - Framework selection
# - Quality gate thresholds
# - Advanced validation settings

RESET TO DEFAULTS:
$ claude-flow-novice validate setup --reset
# Resets all configuration to framework defaults

JSON OUTPUT (for automation):
$ claude-flow-novice validate show-config --json
{
  "framework": "typescript",
  "qualityGates": {
    "truthScore": 0.90,
    "testCoverage": 0.95
  }
}
`,
};

export const ERROR_MESSAGES = {
  setupFailed: {
    title: '‚ùå Setup Failed',
    common: [
      "Check that you're in the project root directory",
      'Ensure you have write permissions',
      'Verify internet connectivity for consensus features',
      'Try running with --verbose for more details',
    ],
  },

  frameworkDetectionFailed: {
    title: '‚ö†Ô∏è Framework Detection Issues',
    common: [
      'Add missing configuration files (package.json, tsconfig.json, requirements.txt)',
      'Ensure project files are present in current directory',
      'Consider manual framework selection',
      'Check file permissions and accessibility',
    ],
  },

  configurationInvalid: {
    title: 'üîß Configuration Problems',
    common: [
      'Review quality gate thresholds (must be 0-100%)',
      'Check validation settings for correct values',
      'Verify framework selection is supported',
      'Consider resetting to defaults',
    ],
  },

  testFailed: {
    title: 'üß™ Configuration Test Failed',
    common: [
      'Run setup wizard first: claude-flow-novice validate setup',
      'Check project structure and required files',
      'Verify network connectivity for Byzantine features',
      'Review error details with --verbose flag',
    ],
  },
};

export const SUCCESS_MESSAGES = {
  setupComplete: `
üéâ Setup Completed Successfully!

Your completion validation framework is ready to use.

Next steps:
‚Ä¢ claude-flow-novice validate test    # Verify your configuration
‚Ä¢ claude-flow-novice validate show-config   # View current settings

The framework will now:
‚úì Automatically detect project framework
‚úì Validate completions against quality gates
‚úì Provide Byzantine fault-tolerant consensus
‚úì Maintain high code quality standards
`,

  configurationValid: `
‚úÖ Configuration Valid

Your validation setup is working correctly:
‚Ä¢ Framework detection is functional
‚Ä¢ Quality gates are properly configured
‚Ä¢ Byzantine consensus is available
‚Ä¢ All tests passed successfully
`,

  highConfidenceDetection: `
üéØ High-Confidence Detection

Framework detected with high accuracy:
‚Ä¢ Strong evidence found in project structure
‚Ä¢ Configuration optimized for detected framework
‚Ä¢ Quality gates set to framework best practices
‚Ä¢ Ready for production validation
`,
};

/**
 * Get context-appropriate help text
 */
export function getHelpForContext(context, options = {}) {
  const { framework, confidence, error } = options;

  switch (context) {
    case 'setup-start':
      return HELP_TEXT.overview + HELP_TEXT.quickStart;

    case 'framework-detected':
      if (framework && HELP_TEXT.frameworks[framework]) {
        return HELP_TEXT.frameworks[framework];
      }
      return 'Framework detected successfully. Proceeding with configuration...';

    case 'setup-error':
      return (
        ERROR_MESSAGES.setupFailed.title +
        '\n' +
        ERROR_MESSAGES.setupFailed.common.map((msg) => `  ‚Ä¢ ${msg}`).join('\n') +
        '\n\n' +
        HELP_TEXT.troubleshooting
      );

    case 'test-error':
      return (
        ERROR_MESSAGES.testFailed.title +
        '\n' +
        ERROR_MESSAGES.testFailed.common.map((msg) => `  ‚Ä¢ ${msg}`).join('\n')
      );

    case 'examples':
      return HELP_TEXT.examples;

    case 'best-practices':
      return HELP_TEXT.bestPractices;

    default:
      return HELP_TEXT.overview;
  }
}

/**
 * Get error message with context
 */
export function getErrorMessage(errorType, details = {}) {
  const errorConfig = ERROR_MESSAGES[errorType];
  if (!errorConfig) {
    return 'An unexpected error occurred. Please try again or run with --verbose for more details.';
  }

  let message = errorConfig.title + '\n\n';
  message += errorConfig.common.map((msg) => `  ‚Ä¢ ${msg}`).join('\n');

  if (details.verbose && details.error) {
    message += '\n\nDetailed Error:\n' + details.error;
  }

  return message;
}

/**
 * Get success message with context
 */
export function getSuccessMessage(successType, details = {}) {
  const message = SUCCESS_MESSAGES[successType];
  if (!message) {
    return '‚úÖ Operation completed successfully!';
  }

  return message;
}
